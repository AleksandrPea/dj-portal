{"version":3,"sources":["widget-api.js"],"names":[],"mappings":"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","file":"widget-api.js","sourcesContent":["import angular from 'angular';\r\nimport 'angular-translate';\r\n\r\n/**\r\n * @ngdoc module\r\n * @name app.widgetApi\r\n * @module app.widgetApi\r\n * @description\r\n * Services from this module are a public API for all the widget developers.\r\n * They are documented and are allowed to use.\r\n */\r\nconst widgetApi = angular.module('app.widgetApi', ['app.i18n']);\r\n\r\n/**\r\n * @ngdoc object\r\n * @name eventWires\r\n * @private\r\n * @description Map of emitter scope to array of event-to-slot wires\r\n * @returns {Object.<string, object>}\r\n */\r\nwidgetApi.constant('eventWires', new Map()); // emitterScope -> [{signalName, providerScope, slotName}]\r\n\r\n/**\r\n * @ngdoc object\r\n * @name widgetSlots\r\n * @private\r\n * @description Mapping from providerScope to it's slot and slot's name\r\n * @returns {Object.<string, object>}\r\n */\r\nwidgetApi.constant('widgetSlots', new Map()); // providerScope -> [{slotName, fn}]\r\n\r\n/**\r\n * @ngdoc object\r\n * @name instanceNameToScope\r\n * @private\r\n * @description Mapping from instance name to it's scope\r\n * @returns {Object.<string, object>}\r\n */\r\nwidgetApi.constant('instanceNameToScope', new Map()); // name -> scope\r\n\r\n/**\r\n * @ngdoc object\r\n * @name autoWiredSlotsAndEvents\r\n * @private\r\n * @description Array of signa/slot/providerNames that\r\n * allows widget event auto-configuring api.\r\n */\r\nwidgetApi.constant('autoWiredSlotsAndEvents', []); // index -> {slotName, signalName, providerScope}\r\n\r\nwidgetApi.constant('getWidgetDirectiveScopeFromControllerScope', (scope) => {\r\n  if (scope && scope.$parent && scope.$parent.$parent && scope.$parent.$parent.$parent) {\r\n    return scope.$parent.$parent.$parent;\r\n  } else {\r\n    return scope;\r\n  }\r\n});\r\n\r\nwidgetApi.factory('APIProvider', function ($rootScope, $log,\r\n                                           app,\r\n                                           widgetSlots,\r\n                                           autoWiredSlotsAndEvents,\r\n                                           getWidgetDirectiveScopeFromControllerScope) {\r\n  /**\r\n   * @class APIProvider\r\n   * @description Injectable class\r\n   * @param {$rootScope.Scope} scope Widget's scope\r\n   * @param [scope.widget.instanceName] Widget's unique name\r\n   */\r\n  class APIProvider {\r\n    constructor(controllerScope) {\r\n      this.scope = getWidgetDirectiveScopeFromControllerScope(controllerScope);\r\n    }\r\n\r\n    /**\r\n     * @description Provides a slot\r\n     * @param {string} slotName Name of the slot\r\n     * @param {Function} slot Slot function\r\n     * @returns {APIProvider}\r\n     */\r\n    provide(slotName, fn) {\r\n      if (typeof fn !== 'function') {\r\n        throw `Second argument should be a function, ${typeof fn} passed instead`;\r\n      }\r\n      widgetSlots.get(this.scope).push({slotName, fn});\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @description Provides a slot automatically called when widget is instantiated and\r\n     * optionally when config was changed\r\n     * @param {Function} slotFn\r\n     * @param {boolean} enableReconfiguring\r\n     * @returns {APIProvider}\r\n     */\r\n    config(slotFn, enableReconfiguring) {\r\n      enableReconfiguring = enableReconfiguring === undefined ? true : enableReconfiguring;\r\n      slotFn();\r\n      if (enableReconfiguring) {\r\n        this.provide(APIProvider.RECONFIG_SLOT, slotFn);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    translate(slotFn) {\r\n      this.provide(APIProvider.TRANSLATE_SLOT, slotFn);\r\n      return this;\r\n    }\r\n\r\n    beforeDesignMode(slotFn) {\r\n      this.provide(APIProvider.BEFORE_DESIGN_MODE_SLOT, slotFn);\r\n      return this;\r\n    }\r\n\r\n     beforePresentationMode(slotFn) {\r\n      this.provide(APIProvider.BEFORE_PRESENTATION_MODE_SLOT, slotFn);\r\n      return this;\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n    /**\r\n     * @description Provides a slot which is\r\n     * automatically called when widget config was changed\r\n     * @param {Function} slotFn\r\n     * @returns {APIProvider}\r\n     */\r\n    reconfig(slotFn) {\r\n      this.provide(APIProvider.RECONFIG_SLOT, slotFn);\r\n      slotFn();\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @description Provides possibility auto-wiring events with widget's slots.\r\n     * @param {string} slotName Name of this widget's slot\r\n     * @param {string} signalName Name of signal name; when this signal is emitted; slot `slotName` is called\r\n     * @returns {APIProvider}\r\n     */\r\n    autoWireSlotWithEvent(slotName, signalName) {\r\n      autoWiredSlotsAndEvents.push({\r\n        slotName,\r\n        signalName,\r\n        providerScope: this.scope\r\n      });\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @description Provides a slot which is\r\n     * automatically called when widget settings are opened\r\n     * @param {Function} slotFn\r\n     * @returns {APIProvider}\r\n     */\r\n    openCustomSettings(slotFn) {\r\n      this.provide(APIProvider.OPEN_CUSTOM_SETTINGS_SLOT, slotFn);\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @description Provides a slot automatically called when widget is removed by user\r\n     * @param {Function} slotFn\r\n     * @returns {APIProvider}\r\n     */\r\n    removal(slotFn) {\r\n      this.provide(APIProvider.REMOVAL_SLOT, slotFn);\r\n      return this;\r\n    }\r\n\r\n    beforeChangePage(slotFn) {\r\n      this.provide(APIProvider.BEFORE_CHANGE_PAGE_SLOT, slotFn);\r\n      return this;\r\n    }\r\n\r\n    pageComplete(slotFn) {\r\n      this.provide( APIProvider.PAGE_COMPLETE_SLOT, slotFn);\r\n      return this;\r\n    }\r\n\r\n    // beforeConfig(slotFn) {\r\n    //   this.provide(APIProvider.BEFORE_CONFIG_SLOT, slotFn);\r\n    //   return this;\r\n    // }\r\n\r\n    // beforeCloneWidget(slotFn) {\r\n    //   this.provide(APIProvider.BEFORE_CLONE_WIDGET_SLOT, slotFn);\r\n    //   return this;\r\n    // }\r\n\r\n    \r\n\r\n  }\r\n\r\n  APIProvider.RECONFIG_SLOT = 'RECONFIG_SLOT';\r\n  APIProvider.PAGE_COMPLETE_SLOT = 'PAGE_COMPLETE_SLOT';\r\n  APIProvider.TRANSLATE_SLOT = 'TRANSLATE_SLOT';\r\n  APIProvider.REMOVAL_SLOT = 'DESTROY_SLOT';\r\n  APIProvider.OPEN_CUSTOM_SETTINGS_SLOT = 'OPEN_CUSTOM_SETTINGS_SLOT';\r\n  APIProvider.BEFORE_DESIGN_MODE_SLOT = 'BEFORE_DESIGN_MODE_SLOT';\r\n  APIProvider.BEFORE_PRESENTATION_MODE_SLOT = 'BEFORE_PRESENTATION_MODE_SLOT';\r\n  APIProvider.BEFORE_CHANGE_PAGE_SLOT = 'BEFORE_CHANGE_PAGE_SLOT';\r\n  // APIProvider.BEFORE_CONFIG_SLOT = 'BEFORE_CONFIG_SLOT';\r\n  // APIProvider.BEFORE_CLONE_WIDGET_SLOT = 'BEFORE_CLONE_WIDGET_SLOT';\r\n\r\n  $rootScope.$watch(() => {\r\n    const pageConf = app.pageConfig();\r\n    return pageConf && pageConf.subscriptions;\r\n  }, () => {\r\n    app.updatePageSubscriptions();\r\n  }, true);\r\n\r\n  return APIProvider;\r\n});\r\n\r\nwidgetApi.factory('APIUser', function (widgetSlots, instanceNameToScope, getWidgetDirectiveScopeFromControllerScope) {\r\n  /**\r\n   * @class APIUser\r\n   * @description Provides a class which allows to consume widget's\r\n   * public API provided with `APIProvider`\r\n   * @param scope Widget's scope\r\n   */\r\n  class APIUser {\r\n    constructor(controllerScope) {\r\n      this.scope = getWidgetDirectiveScopeFromControllerScope(controllerScope);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @returns {string|undefined}\r\n     */\r\n    userName() {\r\n      if (this.scope && this.scope.widget) {\r\n        return this.scope.widget.instanceName;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Invokes widget's slot\r\n     * @param providerName\r\n     * @param slotName\r\n     * @throws if widget doesn't provide this slot\r\n     * @returns {*}\r\n     */\r\n    invoke(providerName, slotName, ...args) {\r\n      const providerScope = APIUser.getScopeByInstanceName(providerName);\r\n      if (!widgetSlots.has(providerScope)) {\r\n        throw `Provider ${providerName} doesn't exist`;\r\n      }\r\n      for (let slot of widgetSlots.get(providerScope)) {\r\n        if (slot.slotName === slotName) {\r\n          return slot.fn.apply(undefined, [{\r\n            emitterName: this.userName(),\r\n            signalName: undefined\r\n          }].concat(args));\r\n        }\r\n      }\r\n      throw `Provider ${providerName} doesn't have slot called ${slotName}`;\r\n    }\r\n\r\n    /**\r\n     * Invokes widget's slot\r\n     * @param providerName\r\n     * @param slotName\r\n     * @returns {object} invocation\r\n     * @returns {boolean} invocation.success - was slot found?\r\n     * @returns {*} invocation.result - value returned by slot\r\n     */\r\n    tryInvoke(providerName, slotName) {\r\n      try {\r\n        return {\r\n          success: true,\r\n          result: this.invoke(providerName, slotName) // might throw\r\n        };\r\n      } catch (e) {\r\n        if (typeof(e) === 'string' && e.indexOf('Provider') > -1) {\r\n          return {\r\n            success: false,\r\n            result: undefined\r\n          };\r\n        } else {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Invokes slot on all widgets\r\n     * @param slotName Name of the slot\r\n     */\r\n    invokeAll(slotName, ...args) {\r\n      for (let slots of widgetSlots.values()) {\r\n        for (let slot of slots) {\r\n          if (slot.slotName === slotName) {\r\n            slot.fn.apply(undefined, [{\r\n              emitterName: this.userName(),\r\n              signalName: undefined\r\n            }].concat(args));\r\n          }\r\n        }\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns registered scope by widget's name\r\n     * @param name Widget's instanceName\r\n     * @returns {$rootScope.Scope|undefined}\r\n     */\r\n    static getScopeByInstanceName(name) {\r\n      return instanceNameToScope.get(name);\r\n    }\r\n\r\n    /**\r\n     * WARNING: this is a deprecated method; use APIUser.getScopeByInstanceName instead\r\n     * of this (APIUser.prototype.getScopeByInstanceName)\r\n     * Returns registered scope by widget's name\r\n     * @param name Widget's instanceName\r\n     * @returns {$rootScope.Scope|undefined}\r\n     */\r\n    getScopeByInstanceName(name) {\r\n      return APIUser.getScopeByInstanceName(name);\r\n    }\r\n  }\r\n\r\n  return APIUser;\r\n});\r\n\r\nwidgetApi.factory('EventEmitter', function ($log, $rootScope,\r\n                                            eventWires, widgetSlots, autoWiredSlotsAndEvents,\r\n                                            getWidgetDirectiveScopeFromControllerScope, app) {\r\n  /**\r\n   * @class EventEmitter\r\n   * @description Provides a class which allows to emit events which, in row, can invoke slots on other widgets\r\n   * using publish/subscribe mechanism\r\n   */\r\n  class EventEmitter {\r\n    constructor(controllerScope) {\r\n      this.scope = getWidgetDirectiveScopeFromControllerScope(controllerScope);\r\n\r\n      app.updatePageSubscriptions();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @returns {string|undefined}\r\n     */\r\n    emitterName() {\r\n      if (this.scope && this.scope.widget) {\r\n        return this.scope.widget.instanceName;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Emit event\r\n     * This automatically calls slots on all subscribed providers\r\n     * Providers (widgets) can subscribe either using APIProvider.prototype.autoWireSlotWithEvent\r\n     * or by user event wiring system.\r\n     * @param signalName Name of the signal\r\n     */\r\n    emit(signalName, ...slotArgs) {\r\n      $rootScope.$evalAsync(() => {\r\n        const args = [{\r\n          emitterName: this.emitterName(),\r\n          signalName: signalName\r\n        }].concat(slotArgs);\r\n\r\n        for (let wire of autoWiredSlotsAndEvents) {\r\n          if (wire.signalName === signalName) {\r\n\r\n            const slots = widgetSlots.get(wire.providerScope);\r\n            if (!slots) {\r\n              continue;\r\n            }\r\n\r\n            for (let slot of slots) {\r\n              if (!slot || slot.slotName !== wire.slotName) continue;\r\n              slot.fn.apply(undefined, args);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!this.emitterName() || typeof this.emitterName() !== 'string') {\r\n          $log.info(`Not emitting event through user event wiring system\r\n            because widget's instanceName is not set`);\r\n        }\r\n        const wires = eventWires.get(this.scope);\r\n        if (!wires) {\r\n          return;\r\n        }\r\n        for (let wire of wires) {\r\n          if (wire && wire.signalName === signalName) {\r\n\r\n            const slots = widgetSlots.get(wire.providerScope);\r\n            if (!slots) {\r\n              continue;\r\n            }\r\n\r\n            for (let slot of slots) {\r\n              if (!slot || slot.slotName !== wire.slotName) continue;\r\n              slot.fn.apply(undefined, args);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return EventEmitter;\r\n});\r\n\r\n\r\n/**\r\n * @ngdoc function\r\n * @name pageSubscriptions\r\n *\r\n * @description Injectable function which returns\r\n * a plain JavaScript array of subscriptions on the current page.\r\n * All the Array.prototype methods are available\r\n * @example\r\n * // To add one more subscription, inject pageSubscriptions and execute\r\n * pageSubscriptions().push({\r\n   *   emitter: 'summator-master',\r\n   *   receiver: 'summator-slave',\r\n   *   signal: 'sumUpdated',\r\n   *   slot: 'setValueOfA'\r\n   * });\r\n *\r\n * @returns {Array}\r\n */\r\nwidgetApi.factory('pageSubscriptions', function (app) {\r\n   return app.pageSubscriptions.bind(app);\r\n});\r\n\r\n/**\r\n * @ngdoc function\r\n * @name pageWidgets\r\n *\r\n * @description Injectable function which returns\r\n * a plain JavaScript array of widgets\r\n * (their config objects containing at least `type` and `instanceName`)\r\n * on the current page.\r\n * All the Array.prototype methods are available on the returned result\r\n *\r\n * Please don't modify returned object!\r\n * @returns {Array}\r\n */\r\nwidgetApi.factory('pageWidgets', function (app) {\r\n  return () => {\r\n    const holders = app.pageConfig().holders;\r\n    let widgets = [];\r\n    for (let holderName in holders) {\r\n      if (holders.hasOwnProperty(holderName)) {\r\n        widgets = widgets.concat(holders[holderName].widgets);\r\n      }\r\n    }\r\n    return widgets;\r\n  };\r\n});\r\n\r\nwidgetApi.factory('parentHolder', function (app) {\r\n  return (widget) => {\r\n    const holders = app.pageConfig().holders;\r\n    for (let holderName in holders) {\r\n      if (holders.hasOwnProperty(holderName)) {\r\n        const holder = holders[holderName];\r\n        if (holder.widgets.find(w => w.instanceName === widget.instanceName)) {\r\n          return holder;\r\n        }\r\n      }\r\n    }\r\n  };\r\n});\r\n\r\nwidgetApi.directive('widgetTranslate', function (translateDirective) {\r\n  const directive = translateDirective[0];\r\n  return {\r\n    restrict: 'AE',\r\n    scope: true,\r\n    require: '^widget',\r\n    compile: (tElement, tAttr) => {\r\n      const link = directive.compile(tElement, tAttr);\r\n\r\n      return (scope, elem, attrs) => {\r\n        const widgetType = scope.type;\r\n        const prefix = `WIDGET.${widgetType.toUpperCase()}.`;\r\n        if (attrs.translate) {\r\n          const translationId =`${prefix}${attrs.translate.trim()}`\r\n          attrs.translate = translationId;\r\n        } else if (elem.html().trim()) {\r\n          const translationId =`${prefix}${elem.html().trim()}`\r\n          elem.html(translationId);\r\n        }\r\n\r\n        for (let attr in attrs) {\r\n          if (/^translateAttr.*/.test(attr) || /^translate-attr-.*/.test(attr)) {\r\n            attrs[attr] = `${prefix}${attrs[attr]}`;\r\n          }\r\n        }\r\n\r\n        return link(scope, elem, attrs);\r\n      }\r\n    }\r\n  }\r\n});\r\n"],"sourceRoot":"/source/"}
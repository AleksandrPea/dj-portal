{"version":3,"sources":["hotkeys.js"],"names":[],"mappings":";;QAAO,WAAW;;AAEhB,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAS,SAAS,EAAE;;;;;;AAMxE,MAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;;;;;;AAM9B,MAAI,CAAC,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;;;;;;;AAOnD,MAAI,CAAC,aAAa,GAAG,qBAAqB,CAAC;;;;;;;AAO3C,MAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AAC3B,MAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;;;;;AAM3B,MAAI,CAAC,QAAQ,GAAG,+HAAuH,GACrH,oEAAgE,GAChE,sDAAkD,GAClD,gBAAgB,GACd,iFAAiF,GAC/E,iCAA+B,GAC7B,uGAAmG,GACrG,OAAO,GACP,8DAA4D,GAC9D,OAAO,GACT,kBAAkB,GAClB,sDAAkD,GAClD,0EAAsE,GACxE,cAAc,CAAC;;;;;;AAM/B,MAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;;;;;;AAM5B,MAAI,CAAC,qBAAqB,GAAG,4BAA4B,CAAC;;AAE1D,MAAI,CAAC,IAAI,GAAG,UAAU,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE;;;;;AAK5E,aAAS,CAAC,SAAS,CAAC,YAAY,GAAG,UAAS,KAAK,EAAE,OAAO,EAAE;;AAE1D,UAAI,CAAC,GAAG,GAAG,OAAO,CAAC,SAAS,GAAG,GAAG,CAAA,CAAE,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;AAC/D,eAAO,KAAK,CAAC;OACd;;AAED,aAAQ,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,eAAe,IAAI,MAAM,CAAE;KACvE,CAAC;;;;;;;AAOF,aAAS,SAAS,CAAE,KAAK,EAAE;AACzB,UAAI,GAAG,GAAG;AACR,eAAO,EAAK,GAAG;AACf,aAAK,EAAO,GAAG;AACf,YAAI,EAAQ,GAAG;AACf,aAAK,EAAO,GAAG;AACf,UAAE,EAAU,GAAG;AACf,YAAI,EAAQ,GAAG;AACf,gBAAQ,EAAI,GAAG;AACf,iBAAS,EAAG,GAAG;OAChB,CAAC;AACF,WAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAEzB,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAErC,YAAI,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;AACtB,cAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,IAAG,CAAC,EAAG;AACvE,iBAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;WACtB,MAAM;AACL,iBAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;WACnB;SACF;;AAED,aAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;OACtC;;AAED,aAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1B;;;;;;;;;;;;AAYD,aAAS,MAAM,CAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE;;;;;AAK1E,UAAI,CAAC,KAAK,GAAG,KAAK,YAAY,KAAK,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;AACtD,UAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,UAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,UAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,UAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,UAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,UAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACvB;;;;;;;;;AASD,UAAM,CAAC,SAAS,CAAC,MAAM,GAAG,YAAW;AACnC,UAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;;;AAG3B,YAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAE1B,YAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACnC,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,kBAAQ,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SACtC;AACD,YAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;OAC3B;;AAED,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB,CAAC;;;;;;AAMF,QAAI,KAAK,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;;;;;;AAM9B,SAAK,CAAC,OAAO,GAAG,EAAE,CAAC;;;;;;AAMnB,SAAK,CAAC,WAAW,GAAG,KAAK,CAAC;;;;;;AAM1B,SAAK,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;;;;;;AAMjC,SAAK,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;;;;;;AAMnC,SAAK,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;;;;;;;AAOnC,SAAK,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;;;;;;;;;AAU1C,QAAI,WAAW,GAAG,EAAE,CAAC;;AAErB,QAAI,IAAI,CAAC,UAAU,EAAE;AACnB,gBAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;AAC5D,oBAAY,EAAE,CAAC;;AAEf,YAAI,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE;AAC1B,iBAAO,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,MAAM,EAAE;;;;AAI/C,gBAAI,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACzB,gBAAI,OAAO,QAAQ,AAAC,KAAK,QAAQ,IAAI,QAAQ,YAAY,MAAM,EAAE;AAC/D,oBAAM,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aAC/B;;;;AAID,kBAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;AAClB,gBAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;WAC1B,CAAC,CAAC;SACJ;OACF,CAAC,CAAC;KACJ;;;AAKD,QAAI,IAAI,CAAC,iBAAiB,EAAE;AAC1B,UAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5B,UAAI,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAC9B,UAAI,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9C,UAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;;;AAG1E,UAAI,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,QAAQ,CAAC,eAAe,EAAE;AAChE,eAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;OACzB;;AAED,aAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;KAC5D;;;;;;;;AASD,aAAS,YAAY,GAAG;AACtB,UAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;AAC7B,aAAO,CAAC,EAAE,EAAE;AACV,YAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC9B,YAAI,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;AAChC,cAAI,CAAC,MAAM,CAAC,CAAC;SACd;OACF;KACF;;;;;AAKD,QAAI,WAAW,GAAG,KAAK,CAAC;;AAExB,aAAS,gBAAgB,GAAG;AAC1B,WAAK,CAAC,WAAW,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;;;;;AAKvC,UAAI,KAAK,CAAC,WAAW,EAAE;AACrB,mBAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,YAAI,CAAC,KAAK,CAAC,CAAC;;;;;AAKZ,YAAI,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;OAC/F,MAAM;AACL,YAAI,CAAC,KAAK,CAAC,CAAC;;;AAGZ,YAAI,WAAW,KAAK,KAAK,EAAE;AACzB,cAAI,CAAC,WAAW,CAAC,CAAC;SACnB;OACF;KACF;;;;;;;;;;;;AAYD,aAAS,IAAI,CAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE;;;AAGxE,UAAI,SAAS,CAAC;;;AAGd,UAAI,SAAS,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;;;AAGhD,UAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAEpD,UAAI,OAAO,KAAK,iBAAiB,EAAE;AACjC,mBAAW,GAAG,KAAK,CAAC,WAAW,CAAC;AAChC,gBAAQ,GAAM,KAAK,CAAC,QAAQ,CAAC;AAC7B,cAAM,GAAQ,KAAK,CAAC,MAAM,CAAC;AAC3B,kBAAU,GAAI,KAAK,CAAC,UAAU,CAAC;AAC/B,eAAO,GAAO,KAAK,CAAC,OAAO,CAAC;AAC5B,aAAK,GAAS,KAAK,CAAC,KAAK,CAAC;OAC3B;;;AAGD,UAAI,CAAC,KAAK,CAAC,CAAC;;;AAGZ,UAAI,WAAW,YAAY,QAAQ,EAAE;AACnC,cAAM,GAAG,QAAQ,CAAC;AAClB,gBAAQ,GAAG,WAAW,CAAC;AACvB,mBAAW,GAAG,eAAe,CAAC;OAC/B,MAAM,IAAI,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;AAC3C,mBAAW,GAAG,eAAe,CAAC;OAC/B;;;;;AAKD,UAAI,UAAU,KAAK,SAAS,EAAE;AAC5B,kBAAU,GAAG,IAAI,CAAC;OACnB;;;;;AAKD,UAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;;;AAGlC,iBAAS,GAAG,QAAQ,CAAC;;;AAGrB,YAAI,EAAE,OAAO,YAAY,KAAK,CAAA,AAAC,EAAE;AAC/B,iBAAO,GAAG,EAAE,CAAC;SACd;;;AAGD,YAAI,KAAK,CAAC;AACV,aAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,iBAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AACtC,eAAK,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,cAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AAChB,qBAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;WAC5B;SACF;;;AAGD,gBAAQ,GAAG,UAAS,KAAK,EAAE;AACzB,cAAI,aAAa,GAAG,IAAI,CAAC;;;;AAIzB,cAAI,KAAK,EAAE;AACT,gBAAI,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC;AAC9C,gBAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;;;AAG7C,gBAAI,CAAC,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,CAAA,CAAE,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;AAC9D,2BAAa,GAAG,IAAI,CAAC;aACtB,MAAM;;AAEL,mBAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,oBAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;AAC7B,+BAAa,GAAG,KAAK,CAAC;AACtB,wBAAM;iBACP;eACF;aACF;WACF;;AAED,cAAI,aAAa,EAAE;AACjB,qBAAS,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;WAC7C;SACF,CAAC;OACH;;AAED,UAAI,OAAO,MAAM,AAAC,KAAK,QAAQ,EAAE;AAC/B,iBAAS,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;OACpD,MAAM;AACL,iBAAS,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;OAC5C;;AAED,UAAI,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACnF,WAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC3B,aAAO,MAAM,CAAC;KACf;;;;;;;;AAQD,aAAS,IAAI,CAAE,MAAM,EAAE;AACrB,UAAI,KAAK,GAAG,AAAC,MAAM,YAAY,MAAM,GAAI,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;;AAE/D,eAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;;AAExB,UAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAC1B,YAAI,SAAS,GAAG,IAAI,CAAC;AACrB,YAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AACrB,eAAO,CAAC,EAAE,EAAE;AACV,mBAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;SACzC;AACD,eAAO,SAAS,CAAC;OAClB,MAAM;AACL,YAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;AAE/C,YAAI,KAAK,GAAG,CAAC,CAAC,EAAE;;AAEd,cAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACzC,iBAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;WACjF,MAAM;;;AAGL,mBAAO,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AACjD,kBAAI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1D,kBAAI,UAAU,KAAK,CAAC,CAAC,EAAE;AACnB,0BAAU,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;eACpC;aACF,CAAC,CAAC;;AAEH,iBAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;WAChC;AACD,iBAAO,IAAI,CAAC;SACb;OACF;;AAED,aAAO,KAAK,CAAC;KAEd;;;;;;;;AAQD,aAAS,IAAI,CAAE,KAAK,EAAE;;AAEpB,UAAI,CAAC,KAAK,EAAE;AACV,eAAO,KAAK,CAAC,OAAO,CAAC;OACtB;;AAED,UAAI,MAAM,CAAC;;AAEX,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7C,cAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;AAE1B,YAAI,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;AACpC,iBAAO,MAAM,CAAC;SACf;OACF;;AAED,aAAO,KAAK,CAAC;KACd;;;;;;;;AAQD,aAAS,MAAM,CAAE,KAAK,EAAE;;AAEtB,UAAI,EAAE,KAAK,CAAC,GAAG,IAAI,WAAW,CAAA,AAAC,EAAE;;;AAG/B,mBAAW,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;;AAE5B,aAAK,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY;AAChC,cAAI,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;AACtC,iBAAO,CAAC,EAAE,EAAE;AACV,gBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;WACpC;SACF,CAAC,CAAC;OACJ;;;AAGD,aAAO;AACL,WAAG,EAAE,aAAU,IAAI,EAAE;AACnB,cAAI,MAAM,CAAC;;AAEX,cAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACxB,kBAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;WACtC,MAAM;AACL,kBAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;WACrB;;AAED,qBAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACpC,iBAAO,IAAI,CAAC;SACb;OACF,CAAC;KACH;;;;;;;;;AASD,aAAS,SAAS,CAAE,QAAQ,EAAE;;AAE5B,aAAO,UAAU,KAAK,EAAE,KAAK,EAAE;;;;;AAK7B,YAAI,QAAQ,YAAY,KAAK,EAAE;AAC7B,cAAI,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC7B,cAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxB,kBAAQ,GAAG,UAAU,KAAK,EAAE;AAC1B,iBAAK,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;WAC/B,CAAC;SACH;;;;AAID,kBAAU,CAAC,MAAM,CAAC,YAAW;;AAE3B,kBAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAC9B,CAAC,CAAC;OACJ,CAAC;KACH;;AAGD,QAAI,SAAS,GAAG;AACd,SAAG,EAAqB,IAAI;AAC5B,SAAG,EAAqB,IAAI;AAC5B,SAAG,EAAqB,IAAI;AAC5B,YAAM,EAAkB,MAAM;AAC9B,cAAQ,EAAgB,IAAI,CAAC,QAAQ;AACrC,sBAAgB,EAAQ,gBAAgB;AACxC,uBAAiB,EAAO,IAAI,CAAC,iBAAiB;AAC9C,sBAAgB,EAAQ,IAAI,CAAC,gBAAgB;AAC7C,2BAAqB,EAAG,IAAI,CAAC,qBAAqB;AAClD,gBAAU,EAAc,IAAI,CAAC,UAAU;AACvC,kBAAY,EAAY,YAAY;AACpC,mBAAa,EAAW,IAAI,CAAC,aAAa;KAC3C,CAAC;;AAEF,WAAO,SAAS,CAAC;GAElB,CAAC;CAGH,CAAC,CAED,SAAS,CAAC,QAAQ,EAAE,UAAU,OAAO,EAAE;AACtC,SAAO;AACL,YAAQ,EAAE,GAAG;AACb,QAAI,EAAE,cAAU,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE;AAChC,UAAI,GAAG,EAAE,OAAO,CAAC;;AAEjB,aAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,UAAU,IAAI,EAAE,MAAM,EAAE;;AAEjE,eAAO,GAAG,OAAO,KAAK,CAAC,aAAa,KAAK,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;;AAE7F,WAAG,GAAG,MAAM,CAAC;;AAEb,eAAO,CAAC,GAAG,CAAC;AACV,eAAK,EAAE,MAAM;AACb,qBAAW,EAAE,KAAK,CAAC,iBAAiB;AACpC,kBAAQ,EAAE,IAAI;AACd,gBAAM,EAAE,KAAK,CAAC,YAAY;AAC1B,iBAAO,EAAE,OAAO;SACjB,CAAC,CAAC;OACJ,CAAC,CAAC;;;AAGH,QAAE,CAAC,IAAI,CAAC,UAAU,EAAE,YAAW;AAC7B,eAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;OAClB,CAAC,CAAC;KACJ;GACF,CAAC;CACH,CAAC,CAED,GAAG,CAAC,UAAS,OAAO,EAAE,EAGtB,CAAC,CAAC","file":"hotkeys.js","sourcesContent":["import \"mousetrap\";\r\n\r\n  angular.module('cfp.hotkeys', []).provider('hotkeys', function($injector) {\r\n\r\n    /**\r\n     * Configurable setting to disable the cheatsheet entirely\r\n     * @type {Boolean}\r\n     */\r\n    this.includeCheatSheet = true;\r\n\r\n    /**\r\n     * Configurable setting to disable ngRoute hooks\r\n     * @type {Boolean}\r\n     */\r\n    this.useNgRoute = $injector.has('ngViewDirective');\r\n\r\n    /**\r\n     * Configurable setting for the cheat sheet title\r\n     * @type {String}\r\n     */\r\n\r\n    this.templateTitle = 'Keyboard Shortcuts:';\r\n\r\n    /**\r\n     * Configurable settings for the cheat sheet header and footer.  Both are HTML, and the header\r\n     * overrides the normal title if specified.\r\n     * @type {String}\r\n     */\r\n    this.templateHeader = null;\r\n    this.templateFooter = null;\r\n\r\n    /**\r\n     * Cheat sheet template in the event you want to totally customize it.\r\n     * @type {String}\r\n     */\r\n    this.template = '<div class=\"cfp-hotkeys-container fade\" ng-class=\"{in: helpVisible}\" style=\"display: none;\"><div class=\"cfp-hotkeys\">' +\r\n                      '<h4 class=\"cfp-hotkeys-title\" ng-if=\"!header\">{{ title }}</h4>' +\r\n                      '<div ng-bind-html=\"header\" ng-if=\"header\"></div>' +\r\n                      '<table><tbody>' +\r\n                        '<tr ng-repeat=\"hotkey in hotkeys | filter:{ description: \\'!$$undefined$$\\' }\">' +\r\n                          '<td class=\"cfp-hotkeys-keys\">' +\r\n                            '<span ng-repeat=\"key in hotkey.format() track by $index\" class=\"cfp-hotkeys-key\">{{ key }}</span>' +\r\n                          '</td>' +\r\n                          '<td class=\"cfp-hotkeys-text\">{{ hotkey.description }}</td>' +\r\n                        '</tr>' +\r\n                      '</tbody></table>' +\r\n                      '<div ng-bind-html=\"footer\" ng-if=\"footer\"></div>' +\r\n                      '<div class=\"cfp-hotkeys-close\" ng-click=\"toggleCheatSheet()\">×</div>' +\r\n                    '</div></div>';\r\n\r\n    /**\r\n     * Configurable setting for the cheat sheet hotkey\r\n     * @type {String}\r\n     */\r\n    this.cheatSheetHotkey = '?';\r\n\r\n    /**\r\n     * Configurable setting for the cheat sheet description\r\n     * @type {String}\r\n     */\r\n    this.cheatSheetDescription = 'Show / hide this help menu';\r\n\r\n    this.$get = function ($rootElement, $rootScope, $compile, $window, $document) {\r\n\r\n      // monkeypatch Mousetrap's stopCallback() function\r\n      // this version doesn't return true when the element is an INPUT, SELECT, or TEXTAREA\r\n      // (instead we will perform this check per-key in the _add() method)\r\n      Mousetrap.prototype.stopCallback = function(event, element) {\r\n        // if the element has the class \"mousetrap\" then no need to stop\r\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\r\n          return false;\r\n        }\r\n\r\n        return (element.contentEditable && element.contentEditable == 'true');\r\n      };\r\n\r\n      /**\r\n       * Convert strings like cmd into symbols like ⌘\r\n       * @param  {String} combo Key combination, e.g. 'mod+f'\r\n       * @return {String}       The key combination with symbols\r\n       */\r\n      function symbolize (combo) {\r\n        var map = {\r\n          command   : '⌘',\r\n          shift     : '⇧',\r\n          left      : '←',\r\n          right     : '→',\r\n          up        : '↑',\r\n          down      : '↓',\r\n          'return'  : '↩',\r\n          backspace : '⌫'\r\n        };\r\n        combo = combo.split('+');\r\n\r\n        for (var i = 0; i < combo.length; i++) {\r\n          // try to resolve command / ctrl based on OS:\r\n          if (combo[i] === 'mod') {\r\n            if ($window.navigator && $window.navigator.platform.indexOf('Mac') >=0 ) {\r\n              combo[i] = 'command';\r\n            } else {\r\n              combo[i] = 'ctrl';\r\n            }\r\n          }\r\n\r\n          combo[i] = map[combo[i]] || combo[i];\r\n        }\r\n\r\n        return combo.join(' + ');\r\n      }\r\n\r\n      /**\r\n       * Hotkey object used internally for consistency\r\n       *\r\n       * @param {array}    combo       The keycombo. it's an array to support multiple combos\r\n       * @param {String}   description Description for the keycombo\r\n       * @param {Function} callback    function to execute when keycombo pressed\r\n       * @param {string}   action      the type of event to listen for (for mousetrap)\r\n       * @param {array}    allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')\r\n       * @param {Boolean}  persistent  Whether the hotkey persists navigation events\r\n       */\r\n      function Hotkey (combo, description, callback, action, allowIn, persistent) {\r\n        // TODO: Check that the values are sane because we could\r\n        // be trying to instantiate a new Hotkey with outside dev's\r\n        // supplied values\r\n\r\n        this.combo = combo instanceof Array ? combo : [combo];\r\n        this.description = description;\r\n        this.callback = callback;\r\n        this.action = action;\r\n        this.allowIn = allowIn;\r\n        this.persistent = persistent;\r\n        this._formated = null;\r\n      }\r\n\r\n      /**\r\n       * Helper method to format (symbolize) the key combo for display\r\n       *\r\n       * @return {[Array]} An array of the key combination sequence\r\n       *   for example: \"command+g c i\" becomes [\"⌘ + g\", \"c\", \"i\"]\r\n       *\r\n       */\r\n      Hotkey.prototype.format = function() {\r\n        if (this._formated === null) {\r\n          // Don't show all the possible key combos, just the first one.  Not sure\r\n          // of usecase here, so open a ticket if my assumptions are wrong\r\n          var combo = this.combo[0];\r\n\r\n          var sequence = combo.split(/[\\s]/);\r\n          for (var i = 0; i < sequence.length; i++) {\r\n            sequence[i] = symbolize(sequence[i]);\r\n          }\r\n          this._formated = sequence;\r\n        }\r\n\r\n        return this._formated;\r\n      };\r\n\r\n      /**\r\n       * A new scope used internally for the cheatsheet\r\n       * @type {$rootScope.Scope}\r\n       */\r\n      var scope = $rootScope.$new();\r\n\r\n      /**\r\n       * Holds an array of Hotkey objects currently bound\r\n       * @type {Array}\r\n       */\r\n      scope.hotkeys = [];\r\n\r\n      /**\r\n       * Contains the state of the help's visibility\r\n       * @type {Boolean}\r\n       */\r\n      scope.helpVisible = false;\r\n\r\n      /**\r\n       * Holds the title string for the help menu\r\n       * @type {String}\r\n       */\r\n      scope.title = this.templateTitle;\r\n\r\n      /**\r\n       * Holds the header HTML for the help menu\r\n       * @type {String}\r\n       */\r\n      scope.header = this.templateHeader;\r\n\r\n      /**\r\n       * Holds the footer HTML for the help menu\r\n       * @type {String}\r\n       */\r\n      scope.footer = this.templateFooter;\r\n\r\n      /**\r\n       * Expose toggleCheatSheet to hotkeys scope so we can call it using\r\n       * ng-click from the template\r\n       * @type {function}\r\n       */\r\n      scope.toggleCheatSheet = toggleCheatSheet;\r\n\r\n\r\n      /**\r\n       * Holds references to the different scopes that have bound hotkeys\r\n       * attached.  This is useful to catch when the scopes are `$destroy`d and\r\n       * then automatically unbind the hotkey.\r\n       *\r\n       * @type {Array}\r\n       */\r\n      var boundScopes = [];\r\n\r\n      if (this.useNgRoute) {\r\n        $rootScope.$on('$routeChangeSuccess', function (event, route) {\r\n          purgeHotkeys();\r\n\r\n          if (route && route.hotkeys) {\r\n            angular.forEach(route.hotkeys, function (hotkey) {\r\n              // a string was given, which implies this is a function that is to be\r\n              // $eval()'d within that controller's scope\r\n              // TODO: hotkey here is super confusing.  sometimes a function (that gets turned into an array), sometimes a string\r\n              var callback = hotkey[2];\r\n              if (typeof(callback) === 'string' || callback instanceof String) {\r\n                hotkey[2] = [callback, route];\r\n              }\r\n\r\n              // todo: perform check to make sure not already defined:\r\n              // this came from a route, so it's likely not meant to be persistent\r\n              hotkey[5] = false;\r\n              _add.apply(this, hotkey);\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n\r\n      // Auto-create a help menu:\r\n      if (this.includeCheatSheet) {\r\n        var document = $document[0];\r\n        var element = $rootElement[0];\r\n        var helpMenu = angular.element(this.template);\r\n        _add(this.cheatSheetHotkey, this.cheatSheetDescription, toggleCheatSheet);\r\n\r\n        // If $rootElement is document or documentElement, then body must be used\r\n        if (element === document || element === document.documentElement) {\r\n          element = document.body;\r\n        }\r\n\r\n        angular.element(element).append($compile(helpMenu)(scope));\r\n      }\r\n\r\n\r\n      /**\r\n       * Purges all non-persistent hotkeys (such as those defined in routes)\r\n       *\r\n       * Without this, the same hotkey would get recreated everytime\r\n       * the route is accessed.\r\n       */\r\n      function purgeHotkeys() {\r\n        var i = scope.hotkeys.length;\r\n        while (i--) {\r\n          var hotkey = scope.hotkeys[i];\r\n          if (hotkey && !hotkey.persistent) {\r\n            _del(hotkey);\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Toggles the help menu element's visiblity\r\n       */\r\n      var previousEsc = false;\r\n\r\n      function toggleCheatSheet() {\r\n        scope.helpVisible = !scope.helpVisible;\r\n\r\n        // Bind to esc to remove the cheat sheet.  Ideally, this would be done\r\n        // as a directive in the template, but that would create a nasty\r\n        // circular dependency issue that I don't feel like sorting out.\r\n        if (scope.helpVisible) {\r\n          previousEsc = _get('esc');\r\n          _del('esc');\r\n\r\n          // Here's an odd way to do this: we're going to use the original\r\n          // description of the hotkey on the cheat sheet so that it shows up.\r\n          // without it, no entry for esc will ever show up (#22)\r\n          _add('esc', previousEsc.description, toggleCheatSheet, null, ['INPUT', 'SELECT', 'TEXTAREA']);\r\n        } else {\r\n          _del('esc');\r\n\r\n          // restore the previously bound ESC key\r\n          if (previousEsc !== false) {\r\n            _add(previousEsc);\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Creates a new Hotkey and creates the Mousetrap binding\r\n       *\r\n       * @param {string}   combo       mousetrap key binding\r\n       * @param {string}   description description for the help menu\r\n       * @param {Function} callback    method to call when key is pressed\r\n       * @param {string}   action      the type of event to listen for (for mousetrap)\r\n       * @param {array}    allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')\r\n       * @param {boolean}  persistent  if true, the binding is preserved upon route changes\r\n       */\r\n      function _add (combo, description, callback, action, allowIn, persistent) {\r\n\r\n        // used to save original callback for \"allowIn\" wrapping:\r\n        var _callback;\r\n\r\n        // these elements are prevented by the default Mousetrap.stopCallback():\r\n        var preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];\r\n\r\n        // Determine if object format was given:\r\n        var objType = Object.prototype.toString.call(combo);\r\n\r\n        if (objType === '[object Object]') {\r\n          description = combo.description;\r\n          callback    = combo.callback;\r\n          action      = combo.action;\r\n          persistent  = combo.persistent;\r\n          allowIn     = combo.allowIn;\r\n          combo       = combo.combo;\r\n        }\r\n\r\n        // no duplicates please\r\n        _del(combo);\r\n\r\n        // description is optional:\r\n        if (description instanceof Function) {\r\n          action = callback;\r\n          callback = description;\r\n          description = '$$undefined$$';\r\n        } else if (angular.isUndefined(description)) {\r\n          description = '$$undefined$$';\r\n        }\r\n\r\n        // any items added through the public API are for controllers\r\n        // that persist through navigation, and thus undefined should mean\r\n        // true in this case.\r\n        if (persistent === undefined) {\r\n          persistent = true;\r\n        }\r\n        // if callback is defined, then wrap it in a function\r\n        // that checks if the event originated from a form element.\r\n        // the function blocks the callback from executing unless the element is specified\r\n        // in allowIn (emulates Mousetrap.stopCallback() on a per-key level)\r\n        if (typeof callback === 'function') {\r\n\r\n          // save the original callback\r\n          _callback = callback;\r\n\r\n          // make sure allowIn is an array\r\n          if (!(allowIn instanceof Array)) {\r\n            allowIn = [];\r\n          }\r\n\r\n          // remove anything from preventIn that's present in allowIn\r\n          var index;\r\n          for (var i=0; i < allowIn.length; i++) {\r\n            allowIn[i] = allowIn[i].toUpperCase();\r\n            index = preventIn.indexOf(allowIn[i]);\r\n            if (index !== -1) {\r\n              preventIn.splice(index, 1);\r\n            }\r\n          }\r\n\r\n          // create the new wrapper callback\r\n          callback = function(event) {\r\n            var shouldExecute = true;\r\n\r\n            // if the callback is executed directly `hotkey.get('w').callback()`\r\n            // there will be no event, so just execute the callback.\r\n            if (event) {\r\n              var target = event.target || event.srcElement; // srcElement is IE only\r\n              var nodeName = target.nodeName.toUpperCase();\r\n\r\n              // check if the input has a mousetrap class, and skip checking preventIn if so\r\n              if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {\r\n                shouldExecute = true;\r\n              } else {\r\n                // don't execute callback if the event was fired from inside an element listed in preventIn\r\n                for (var i=0; i<preventIn.length; i++) {\r\n                  if (preventIn[i] === nodeName) {\r\n                    shouldExecute = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            if (shouldExecute) {\r\n              wrapApply(_callback.apply(this, arguments));\r\n            }\r\n          };\r\n        }\r\n\r\n        if (typeof(action) === 'string') {\r\n          Mousetrap.bind(combo, wrapApply(callback), action);\r\n        } else {\r\n          Mousetrap.bind(combo, wrapApply(callback));\r\n        }\r\n\r\n        var hotkey = new Hotkey(combo, description, callback, action, allowIn, persistent);\r\n        scope.hotkeys.push(hotkey);\r\n        return hotkey;\r\n      }\r\n\r\n      /**\r\n       * delete and unbind a Hotkey\r\n       *\r\n       * @param  {mixed} hotkey   Either the bound key or an instance of Hotkey\r\n       * @return {boolean}        true if successful\r\n       */\r\n      function _del (hotkey) {\r\n        var combo = (hotkey instanceof Hotkey) ? hotkey.combo : hotkey;\r\n\r\n        Mousetrap.unbind(combo);\r\n\r\n        if (angular.isArray(combo)) {\r\n          var retStatus = true;\r\n          var i = combo.length;\r\n          while (i--) {\r\n            retStatus = _del(combo[i]) && retStatus;\r\n          }\r\n          return retStatus;\r\n        } else {\r\n          var index = scope.hotkeys.indexOf(_get(combo));\r\n\r\n          if (index > -1) {\r\n            // if the combo has other combos bound, don't unbind the whole thing, just the one combo:\r\n            if (scope.hotkeys[index].combo.length > 1) {\r\n              scope.hotkeys[index].combo.splice(scope.hotkeys[index].combo.indexOf(combo), 1);\r\n            } else {\r\n\r\n              // remove hotkey from bound scopes\r\n              angular.forEach(boundScopes, function (boundScope) {\r\n                var scopeIndex = boundScope.indexOf(scope.hotkeys[index]);\r\n                if (scopeIndex !== -1) {\r\n                    boundScope.splice(scopeIndex, 1);\r\n                }\r\n              });\r\n\r\n              scope.hotkeys.splice(index, 1);\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n\r\n      }\r\n\r\n      /**\r\n       * Get a Hotkey object by key binding\r\n       *\r\n       * @param  {[string]} [combo]  the key the Hotkey is bound to. Returns all key bindings if no key is passed\r\n       * @return {Hotkey}          The Hotkey object\r\n       */\r\n      function _get (combo) {\r\n\r\n        if (!combo) {\r\n          return scope.hotkeys;\r\n        }\r\n\r\n        var hotkey;\r\n\r\n        for (var i = 0; i < scope.hotkeys.length; i++) {\r\n          hotkey = scope.hotkeys[i];\r\n\r\n          if (hotkey.combo.indexOf(combo) > -1) {\r\n            return hotkey;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      /**\r\n       * Binds the hotkey to a particular scope.  Useful if the scope is\r\n       * destroyed, we can automatically destroy the hotkey binding.\r\n       *\r\n       * @param  {Object} scope The scope to bind to\r\n       */\r\n      function bindTo (scope) {\r\n        // Only initialize once to allow multiple calls for same scope.\r\n        if (!(scope.$id in boundScopes)) {\r\n\r\n          // Add the scope to the list of bound scopes\r\n          boundScopes[scope.$id] = [];\r\n\r\n          scope.$on('$destroy', function () {\r\n            var i = boundScopes[scope.$id].length;\r\n            while (i--) {\r\n              _del(boundScopes[scope.$id].pop());\r\n            }\r\n          });\r\n        }\r\n        // return an object with an add function so we can keep track of the\r\n        // hotkeys and their scope that we added via this chaining method\r\n        return {\r\n          add: function (args) {\r\n            var hotkey;\r\n\r\n            if (arguments.length > 1) {\r\n              hotkey = _add.apply(this, arguments);\r\n            } else {\r\n              hotkey = _add(args);\r\n            }\r\n\r\n            boundScopes[scope.$id].push(hotkey);\r\n            return this;\r\n          }\r\n        };\r\n      }\r\n\r\n      /**\r\n       * All callbacks sent to Mousetrap are wrapped using this function\r\n       * so that we can force a $scope.$apply()\r\n       *\r\n       * @param  {Function} callback [description]\r\n       * @return {[type]}            [description]\r\n       */\r\n      function wrapApply (callback) {\r\n        // return mousetrap a function to call\r\n        return function (event, combo) {\r\n\r\n          // if this is an array, it means we provided a route object\r\n          // because the scope wasn't available yet, so rewrap the callback\r\n          // now that the scope is available:\r\n          if (callback instanceof Array) {\r\n            var funcString = callback[0];\r\n            var route = callback[1];\r\n            callback = function (event) {\r\n              route.scope.$eval(funcString);\r\n            };\r\n          }\r\n\r\n          // this takes place outside angular, so we'll have to call\r\n          // $apply() to make sure angular's digest happens\r\n          $rootScope.$apply(function() {\r\n            // call the original hotkey callback with the keyboard event\r\n            callback(event, _get(combo));\r\n          });\r\n        };\r\n      }\r\n\r\n\r\n      var publicApi = {\r\n        add                   : _add,\r\n        del                   : _del,\r\n        get                   : _get,\r\n        bindTo                : bindTo,\r\n        template              : this.template,\r\n        toggleCheatSheet      : toggleCheatSheet,\r\n        includeCheatSheet     : this.includeCheatSheet,\r\n        cheatSheetHotkey      : this.cheatSheetHotkey,\r\n        cheatSheetDescription : this.cheatSheetDescription,\r\n        useNgRoute            : this.useNgRoute,\r\n        purgeHotkeys          : purgeHotkeys,\r\n        templateTitle         : this.templateTitle\r\n      };\r\n\r\n      return publicApi;\r\n\r\n    };\r\n\r\n\r\n  })\r\n\r\n  .directive('hotkey', function (hotkeys) {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, el, attrs) {\r\n        var key, allowIn;\r\n\r\n        angular.forEach(scope.$eval(attrs.hotkey), function (func, hotkey) {\r\n          // split and trim the hotkeys string into array\r\n          allowIn = typeof attrs.hotkeyAllowIn === \"string\" ? attrs.hotkeyAllowIn.split(/[\\s,]+/) : [];\r\n\r\n          key = hotkey;\r\n\r\n          hotkeys.add({\r\n            combo: hotkey,\r\n            description: attrs.hotkeyDescription,\r\n            callback: func,\r\n            action: attrs.hotkeyAction,\r\n            allowIn: allowIn\r\n          });\r\n        });\r\n\r\n        // remove the hotkey if the directive is destroyed:\r\n        el.bind('$destroy', function() {\r\n          hotkeys.del(key);\r\n        });\r\n      }\r\n    };\r\n  })\r\n\r\n  .run(function(hotkeys) {\r\n    // force hotkeys to run by injecting it. Without this, hotkeys only runs\r\n    // when a controller or something else asks for it via DI.\r\n  });\r\n\r\n"],"sourceRoot":"/source/"}
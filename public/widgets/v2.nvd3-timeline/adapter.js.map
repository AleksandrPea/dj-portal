{"version":3,"sources":["v2.nvd3-timeline/adapter.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,kBAAkB,UAAU,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,IAAI,aAAa;;AAEvF,IAJO,UAAO,gBAAA,QAAM;;AAGpB,IAAM,IAAI,QAAQ,OAAO,yCAAyC;;AAElE,EAAE,QAAQ,wBAAwB,CAAC,QAAO,WAAU,cACpD,UAAU,MAAM,SAAS,YAAY;EACnC,KAAK,kBAAkB,UAAU,SAAS,YAAW,UAAS,KAAI,OAAO;IACvE,IAAI,QAAQ,UAAU,eAAe,QAAQ,UAAU,UAAU;;;;MAI/D,QAAQ,MAAM,SAAS,WAAW;MAClC,QAAQ,MAAM,QAAQ,WAAW;;MAEjC,QAAQ,MAAM,OAAO,MAAM,aAAa,UAAU,WAAW,QAAQ,WAAW;MAChF,QAAQ,SAAS,OAAO,MAAM,aAAa,UAAU,WAAW,QAAQ,WAAW;MACnF,QAAQ,QAAQ,OAAO,MAAM,aAAa,UAAU,WAAW,QAAQ,WAAW;;MAElF,WAAW,aAAa,WAAW,cAAc;QAC/C,MAAM;QACN,SAAS;QACT,SAAS;;;MAGX,QAAQ,aAAa,WAAW;;MAEhC,QAAQ,MAAM,cAAc,WAAW;;MAEvC,QAAQ,MAAM,aAAa,UAAC,GAAM;QAChC,IAAG,MAAM,MAAK;UACZ,MAAM,KAAK,oBAAmB,EAAC,MAAK,GAAE,MAAK,MAAM,YAAW,IAAG,MAAM;;;MAGzE,QAAQ,MAAM,YAAY,KAAK;;MAE/B,QAAQ,MAAM,iBAAiB,UAAS,GAAE;QACxC,IAAI,YAAY,EAAG,QAAQ,YACvB,KAAK,WAAW,EAAE,eAAc,QAAQ,WAAW,WACnD,EAAG,QAAQ,YACR,KAAK,WAAW,EAAE,eAAc,QAAQ,WAAW,aAAa,KAAK,WAAW,EAAE,aAAY,QAAQ,WAAW,WAChH,KAAK,WAAW,EAAE,eAAc,QAAQ,WAAW,WAAS,QAAM,KAAK,WAAW,EAAE,aAAY,QAAQ,WAAW,WACnH,KAAK,WAAW,EAAE,eAAc,QAAQ,WAAW,WAAS,QAAM,KAAK,WAAW,EAAE,aAAY,QAAQ,WAAW,WACpH,KAAK,WAAW,EAAE,eAAc,QAAQ,WAAW,UAAU,KAAK,WAAW,EAAE,aAAY,QAAQ,WAAW,QAC7G,KAAK,WAAW,EAAE,eAAc,QAAQ,WAAW,WAAS,QAAM,KAAK,WAAW,EAAE,aAAY,QAAQ,WAAW,WACnH,KAAK,WAAW,EAAE,eAAc,QAAQ,WAAW,QAAM,QAAM,KAAK,WAAW,EAAE,aAAY,QAAQ,WAAW;;QAExH,IAAI,WAAY,MAAM,aAAa,UAAU,MAAM,WAAW,OAAO,QAAQ,KAAK,EAAE,UAAU;;QAE9F,OAEE,QACC,iCACA,0BACA,uBACE,YACF,UACA,QACA,iCACA,qBACA,4BACA,uCACA,yBACA,OACE,WAAa,WAAW,MAC1B;;;MAIL,QAAQ,MAAM,QAAQ,WAAY,QAAS,WAAW,QAAQ;;;;;;;;;IAShE,OAAO;;EAET,KAAK,gBAAgB,UAAU,SAAS;;IAEtC,IAAI,QAAQ,UAAU,UAAU;MAC9B,IAAI,aAAa;MACjB,WAAW,SAAS,QAAQ,MAAM;MAClC,WAAW,QAAQ,QAAQ,MAAM;MACjC,WAAW,QAAQ,QAAQ,MAAM;MACjC,WAAW,WAAW,QAAQ,SAAS;MACvC,WAAW,UAAU,QAAQ,QAAQ;MACrC,WAAW,cAAc,QAAQ,MAAM;MACvC,WAAW,QAAQ,QAAQ,MAAM;MACjC,WAAW,aAAa,QAAQ;;;;;;;;MAQhC,OAAO;;;IAGV","file":"v2.nvd3-timeline/adapter.js","sourcesContent":["import angular from 'angular';\r\n\r\n\r\nconst m = angular.module('app.widgets.v2.timeline-chart-adapter', [ ]);\r\n\r\nm.service('TimelineChartAdapter', [\"i18n\",\"$lookup\",\"$translate\" , \r\nfunction (i18n, $lookup, $translate) {\r\n  this.applyDecoration = function (options, decoration,selector,api,scope) {\r\n    if (angular.isDefined(decoration) && angular.isDefined(options)) {\r\n      \r\n      //console.log(\"apply decoration for scope\",scope, decoration);\r\n\r\n      options.chart.height = decoration.height;\r\n      options.chart.width = decoration.width;\r\n      \r\n      options.title.text = scope.translations.translate($translate.instant(decoration.title));\r\n      options.subtitle.text = scope.translations.translate($translate.instant(decoration.subtitle));\r\n      options.caption.text = scope.translations.translate($translate.instant(decoration.caption));\r\n\r\n      decoration.timeFormat = decoration.timeFormat || {\r\n        flow: \"YYYY\",\r\n        process: \"MM.YYYY\",\r\n        instant: \"DD/MM/YYYY\"\r\n      };\r\n      \r\n      options.timeFormat = decoration.timeFormat;\r\n\r\n      options.chart.showTooltip = decoration.showTooltip;\r\n\r\n      options.chart.onNavigate = (d) => { \r\n        if(scope.emit){\r\n          scope.emit(\"timelineNavigate\",{data:d,dict:scope.dictionary,tr:scope.translations})\r\n        }  \r\n      }\r\n      options.chart.localeDef = i18n.localeDef();\r\n      \r\n      options.chart.tooltipContent = function(d){\r\n        var timeStamp = (d.type == \"instant\")\r\n          ? i18n.timeFormat(d.originalStart,options.timeFormat.instant)\r\n          : (d.type == \"process\")\r\n            ? (i18n.timeFormat(d.originalStart,options.timeFormat.process) === i18n.timeFormat(d.originalEnd,options.timeFormat.process)) \r\n              ? i18n.timeFormat(d.originalStart,options.timeFormat.instant)+\" - \"+i18n.timeFormat(d.originalEnd,options.timeFormat.instant)\r\n              : i18n.timeFormat(d.originalStart,options.timeFormat.process)+\" - \"+i18n.timeFormat(d.originalEnd,options.timeFormat.process)\r\n            : (i18n.timeFormat(d.originalStart,options.timeFormat.flow) === i18n.timeFormat(d.originalEnd,options.timeFormat.flow))\r\n              ? i18n.timeFormat(d.originalStart,options.timeFormat.process)+\" - \"+i18n.timeFormat(d.originalEnd,options.timeFormat.process)\r\n              : i18n.timeFormat(d.originalStart,options.timeFormat.flow)+\" - \"+i18n.timeFormat(d.originalEnd,options.timeFormat.flow)\r\n        \r\n        var headline = (scope.translations.translate(scope.dictionary.lookup(angular.copy(d.context)).headline));\r\n        \r\n        return ( \r\n          \r\n          '<h5' \r\n          +'   style= \"font-size: 12px;' \r\n          +'   font-weight: bold;' \r\n          +'   margin: 0px;\">'\r\n          + (timeStamp)\r\n          +'</h5>'\r\n          +'<h4' \r\n          +'    style=\"font-size: 12px;' \r\n          +'    margin: 0px;'\r\n          +'    text-align:justify;' \r\n          +'    font-stretch: ultra-condensed;'\r\n          +'    line-height:1;\"'\r\n          +'>'\r\n          + ((headline) ? headline : \"\")\r\n          +'</h4>'\r\n          )\r\n      }\r\n      // options.chart.isArea = decoration.isArea;\r\n      options.chart.color = (decoration.color) ? decoration.color : null;\r\n      // options.chart.lines.label = (decoration.showLabels) ? function (d) {\r\n      //   return d.value.toFixed(2)\r\n      // } : undefined;\r\n      // options.chart.lines.ticks = decoration.ticks;\r\n      // options.chart.lines.tickLabel = decoration.tickLabel;\r\n      // options.chart.lines.grid = decoration.grid;\r\n      // options.chart.lines.axisLabel = decoration.axisLabel;\r\n    }\r\n    return options;\r\n  };\r\n  this.getDecoration = function (options) {\r\n    // console.log(\"options\",options)\r\n    if (angular.isDefined(options)) {\r\n      var decoration = {};\r\n      decoration.height = options.chart.height;\r\n      decoration.width = options.chart.width;\r\n      decoration.title = options.title.text;\r\n      decoration.subtitle = options.subtitle.text;\r\n      decoration.caption = options.caption.text;\r\n      decoration.showTooltip = options.chart.showTooltip;\r\n      decoration.color = options.chart.color;\r\n      decoration.timeformat = options.timeFormat;\r\n      // decoration.showLabels = angular.isDefined(options.chart.lines.label);\r\n\r\n      // decoration.ticks = options.chart.lines.ticks;\r\n      // decoration.tickLabel = options.chart.lines.tickLabel;\r\n      // decoration.grid = options.chart.lines.grid;\r\n      // decoration.axisLabel = options.chart.lines.axisLabel;\r\n\r\n      return decoration;\r\n    }\r\n  };  \r\n}]);"],"sourceRoot":"/source/"}
{"version":3,"sources":["v2.app-list/widget.js"],"names":[],"mappings":"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","file":"v2.app-list/widget.js","sourcesContent":["import angular from 'angular';\r\nimport 'angular-foundation';\r\n\r\n\r\nconst appListWidget = angular.module('app.widgets.v2.app-list', ['mm.foundation']);\r\n\r\n\r\n// appListWidget.controller('AppCreatorController', function ($scope, $http, $translate,\r\n//                                                            EventEmitter, \r\n//                                                            // $modalInstance,\r\n//                                                            appSkins,\r\n//                                                            appUrls, prompt, alert, user) {\r\n//   console.log('INIT AppCreatorController')\r\n//   const evtEmitter = new EventEmitter($scope);\r\n\r\n//   angular.extend($scope, {\r\n//     \"user\" : user,\r\n//     model: {\r\n//       newAppName: \"\",\r\n//       skinName: \"default\"\r\n//     },\r\n//     skins: appSkins,\r\n//     createApp() {\r\n//       const app = {\r\n//         name: this.model.newAppName,\r\n//         skin: this.model.skinName,\r\n//         owner: user\r\n//       };\r\n\r\n//       $http.get(appUrls.api.createApp(app.name, app.skin))\r\n//         .success(data => {\r\n//           app.id = data.id;\r\n//           evtEmitter.emit('new-app-created', app);\r\n//           // $modalInstance.close();\r\n//         })\r\n//         .error((data, error) => {\r\n//           alert.error($translate.instant('WIDGET.APP-CREATOR.ERROR_CREATING_APP', {data, error}));\r\n//         });\r\n//     }\r\n//   });\r\n//   console.log($scope)\r\n// });\r\n\r\n\r\n\r\n\r\nappListWidget.controller('AppListController', function ($scope, $http, $translate,\r\n                                                        APIProvider,EventEmitter,\r\n                                                        i18n,config,appUrls,$modal,\r\n                                                        dialog, prompt, alert, user,\r\n                                                        appSkins, pageSubscriptions,\r\n                                                        $window\r\n                                                        ) {\r\n  \r\n\r\n  var emitter = new EventEmitter($scope);\r\n\r\n  angular.extend($scope, {\r\n    apps: undefined,\r\n    oldApps: undefined,\r\n    update(){\r\n      $http.get(appUrls.appList)\r\n        .success(apps => {\r\n          $scope.apps = apps;\r\n          $scope.oldApps = apps;\r\n          apps.forEach((c) =>{\r\n            if(c.i18n){\r\n              config.i18n = (config.i18n)? config.i18n : {}; \r\n              for(let locale in c.i18n){\r\n                config.i18n[locale] = (config.i18n[locale]) ? config.i18n[locale] : {};\r\n                angular.extend(config.i18n[locale],c.i18n[locale])  \r\n              }\r\n            }  \r\n          })\r\n          i18n.refresh();\r\n        });\r\n       // emitter.emit(\"setApplication\",undefined);  \r\n    },\r\n    isOwner(app) {\r\n      if (!user.id) {\r\n        return false;\r\n      }\r\n      if (!app.owner) {\r\n        return true;\r\n      }\r\n      return app.owner.id === user.id;\r\n    },\r\n    isCollaborator(app) {\r\n      if (!user.id) {\r\n        return false;\r\n      }\r\n      if (!app.collaborations) {\r\n        return false;\r\n      }\r\n      return angular.isUndefined(app.collaborations.find(c => c.user.id === user.id));\r\n    },\r\n\r\n    gotoApp(app){\r\n       $window.location.href = \"/app/\"+app.name;\r\n    },\r\n\r\n    openImportAppDialog(){\r\n      dialog({\r\n        title:`${$translate.instant('WIDGET.V2.APP-LIST.IMPORT_APP')}:`,\r\n        fields:{\r\n          name:{\r\n            title:`${$translate.instant('WIDGET.V2.APP-LIST.NAME')}:`, \r\n            type:'text', \r\n            value:'', \r\n            editable:true, \r\n            required:true\r\n          },\r\n          file:{\r\n            title:`${$translate.instant('WIDGET.V2.APP-LIST.CONF')}:`, \r\n            type:'file', \r\n            editable:true, \r\n            required:true\r\n          }\r\n        }\r\n      }).then((form) => {\r\n        const fd = new FormData();\r\n        // Take the first selected file\r\n        fd.append('file', form.fields.file.value, form.fields.name.value);\r\n        $http.post(appUrls.api.import, fd, {\r\n          withCredentials: true,\r\n          headers: {'Content-Type': undefined},\r\n          transformRequest: angular.identity\r\n        }).success(data => {\r\n          $scope.update();\r\n        }).error((data, status) => {\r\n          if (status === 415) {\r\n            alert.error($translate.instant('WIDGET.V2.APP-LIST.CANNOT_PARSE_DATA_AS_VALID_JSON', {data}));\r\n          } else {\r\n            alert.error($translate.instant('WIDGET.V2.APP-LIST.ERROR_IMPORTING_APP', {status}));\r\n          }\r\n        });\r\n\r\n      })      \r\n    },\r\n    \r\n    openCreateAppDialog() {\r\n      dialog({\r\n        title:`${$translate.instant('WIDGET.V2.APP-LIST.ADD_NEW_APP')}:`,\r\n          fields:{\r\n            name:{\r\n              title:`${$translate.instant('WIDGET.V2.APP-LIST.NAME')}:`, \r\n              type:'text', \r\n              value:'', \r\n              editable:true, \r\n              required:true\r\n            },\r\n            skin:{\r\n              title: `${$translate.instant('WIDGET.V2.APP-LIST.CHOOSE_SKIN')}:`, \r\n              type: 'select', \r\n              value: '',\r\n              options: appSkins.map((item) => {return {title:item.title, value: item.name}}), \r\n              editable: true, \r\n              required: true\r\n            }\r\n          } \r\n      }).then((form) => {\r\n          $http.get(appUrls.api.createApp(form.fields.name.value, form.fields.skin.value))\r\n          .success(data => {\r\n            $scope.update();\r\n          })\r\n          .error((data, error) => {\r\n            alert.error($translate.instant('WIDGET.V2.APP-LIST.ERROR_CREATING_APP', {data, error}));\r\n          });\r\n\r\n      })\r\n    }\r\n  });  \r\n  //   saveApps() {\r\n  //     this.oldApps = angular.copy(this.apps);\r\n  //   },\r\n  //   restoreApps() {\r\n  //     this.apps = this.oldApps;\r\n  //   },\r\n\r\n  //   renameApp(appId) {\r\n  //     prompt(`${$translate.instant('WIDGET.APP-LIST.NEW_NAME')}:`).then(newAppName => {\r\n  //       this.saveApps();\r\n  //       this.apps[this.apps.findIndex(app => appId === app.id)].name = newAppName;\r\n  //       $http.get(appUrls.api.rename(appId, newAppName))\r\n  //         .error((data, error) => {\r\n  //           this.restoreApps();\r\n  //           alert.error($translate.instant('WIDGET.APP-LIST.ERROR_RENAMING_APP', {error, data}));\r\n  //         });\r\n  //     });\r\n  //   },\r\n\r\n  //   deleteApp(appId, appName) {\r\n  //     prompt($translate.instant('WIDGET.APP-LIST.TYPE_APP_NAME_TO_CONFIRM_DELETION')).then(confirmName => {\r\n  //       if (confirmName !== appName) {\r\n  //         alert.error($translate.instant('WIDGET.APP-LIST.WRONG_NAME_APP_NOT_DELETED'));\r\n  //         return;\r\n  //       }\r\n\r\n  //       this.saveApps();\r\n  //       this.apps.splice(this.apps.findIndex(app => appId === app.id), 1);\r\n  //       $http.get(appUrls.api.destroy(appId)).error((data, error) => {\r\n  //         this.restoreApps();\r\n  //         alert.error($translate.instant('WIDGET.APP-LIST.ERROR_DELETING_APP'));\r\n  //       });\r\n  //     });\r\n  //   }\r\n  // });\r\n  // \r\n  \r\n  $scope.tags = [];\r\n\r\n  $scope.select = (app) => {\r\n    if ($scope.selection){\r\n      $scope.selection.selected = false;\r\n    }\r\n    app.selected = true;\r\n    $scope.selection = app;\r\n    \r\n    emitter.emit(\"setApplication\",app);\r\n  }\r\n\r\n  $scope.hasTags = (app) => {\r\n      let f = true;\r\n      app.keywords = (app.keywords)? app.keywords : [];\r\n      let keywords = app.keywords.map((k)=>{\r\n        return $translate.instant(k)\r\n      })\r\n      if($scope.tags){\r\n        $scope.tags.forEach(t => f &= keywords.indexOf(t) >=0 );\r\n      }\r\n      return f;\r\n    };\r\n\r\n  new APIProvider($scope)\r\n    .config(() => {\r\n        \r\n      if($scope.widget.appWidget && $scope.widget.appWidget.length &&\r\n        $scope.widget.appWidget.trim().length > 0){\r\n          \r\n        pageSubscriptions().removeListeners({\r\n            receiver: $scope.widget.instanceName,\r\n            signal: \"setApplication\"\r\n        });\r\n\r\n        $scope.appListeners = ($scope.widget.appWidget) ? $scope.widget.appWidget.split(\",\") : [];\r\n          \r\n        pageSubscriptions().addListeners(\r\n          $scope.appListeners.map((item) =>{\r\n            return {\r\n                emitter: item.trim(),\r\n                receiver:  $scope.widget.instanceName,\r\n                signal: \"setApplication\",\r\n                slot: \"setApplication\"\r\n            }\r\n          })\r\n        );\r\n\r\n      }else{\r\n\r\n        pageSubscriptions().removeListeners({\r\n            receiver: $scope.widget.instanceName,\r\n            signal: \"setApplication\"\r\n        });\r\n\r\n      }\r\n\r\n        $scope.update();\r\n\r\n    })\r\n\r\n    .translate(() => {\r\n      console.log(\"transl\",$scope.selection)\r\n      emitter.emit(\"setApplication\",$scope.selection);\r\n    })\r\n    \r\n    .provide(\"refresh\", () => {\r\n      $scope.update();\r\n    })\r\n\r\n    .provide(\"appTags\", (e,tags) => {\r\n      $scope.tags = tags;\r\n      emitter.emit(\"setApplication\",$scope.selection);  \r\n    })\r\n\r\n    .provide(\"setApplication\", (evt, app) => {\r\n      if(app) $scope.gotoApp(app);\r\n    });\r\n    \r\n})"],"sourceRoot":"/source/"}
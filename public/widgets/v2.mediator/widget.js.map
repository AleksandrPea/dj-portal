{"version":3,"sources":["v2.mediator/widget.js"],"names":[],"mappings":"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","file":"v2.mediator/widget.js","sourcesContent":["import angular from 'angular';\r\nimport 'ng-ace';\r\n\r\n\r\nlet m = angular.module('app.widgets.v2.mediator', [\r\n    'app.dps',\r\n    \"ng.ace\"\r\n])\r\n\r\n\r\nm.controller('MediatorController', function(\r\n    $scope,\r\n    $http,\r\n    $dps,\r\n    EventEmitter,\r\n    APIProvider,\r\n    pageSubscriptions,\r\n    $lookup,\r\n    $translate,\r\n    $modal,\r\n    user,\r\n    i18n,\r\n    $scroll,\r\n    clipboard,\r\n    dialog,\r\n    $error,\r\n    log,\r\n    instanceNameToScope,\r\n    config,\r\n    $info,\r\n    app,\r\n    logIn,\r\n    splash) {\r\n\r\n    const eventEmitter = new EventEmitter($scope);\r\n    const apiProvider = new APIProvider($scope);\r\n\r\n    var __script;\r\n\r\n    // $scope.options = {\r\n    //     mode:'dps', \r\n    //     theme:'tomorrow',\r\n    //     onChange: function(e){\r\n    //      __script = e[1].getSession().getValue();\r\n    //     }\r\n    // }\r\n\r\n    $scope.options = {\r\n        mode: 'javascript',\r\n        theme: 'tomorrow',\r\n        onChange: function(e) {\r\n            __script = e[1].getSession().getValue();\r\n        }\r\n    }\r\n\r\n    $scope.getEditorScript = function() {\r\n        return __script;\r\n    }\r\n\r\n    $scope._api = {\r\n\r\n        widget: function(widgetName) {\r\n            return instanceNameToScope.get(widgetName)\r\n        },\r\n\r\n        config: () => config,\r\n        user: () => user,\r\n        app: () => app,\r\n        logIn: logIn,\r\n\r\n        provide: function(params) {\r\n            let event = params.event;\r\n            let widgets = params.widgets;\r\n            let callback = params.callback;\r\n            widgets = widgets || [];\r\n            widgets = (widgets.forEach) ? widgets : [widgets]\r\n\r\n            apiProvider.provide(event, callback)\r\n\r\n            widgets.forEach((w) => {\r\n\r\n                pageSubscriptions().removeListeners({\r\n                    emitter: w,\r\n                    receiver: $scope.widget.instanceName,\r\n                    signal: event,\r\n                    slot: event\r\n                })\r\n\r\n                pageSubscriptions().addListener({\r\n                    emitter: w,\r\n                    receiver: $scope.widget.instanceName,\r\n                    signal: event,\r\n                    slot: event\r\n                })\r\n            })\r\n        },\r\n\r\n        addListeners: function(params) {\r\n            let event = params.event;\r\n            let widgets = params.widgets;\r\n            widgets = widgets || [];\r\n            widgets = (widgets.forEach) ? widgets : [widgets]\r\n            widgets.forEach((w) => {\r\n\r\n                pageSubscriptions().removeListeners({\r\n                    emitter: $scope.widget.instanceName,\r\n                    receiver: w,\r\n                    signal: event,\r\n                    slot: event\r\n                })\r\n\r\n                pageSubscriptions().addListener({\r\n                    emitter: $scope.widget.instanceName,\r\n                    receiver: w,\r\n                    signal: event,\r\n                    slot: event\r\n                })\r\n            })\r\n        },\r\n\r\n        emit: function(event, data) {\r\n            eventEmitter.emit(event, data)\r\n        },\r\n\r\n        error: function(...args){\r\n            let messages = \r\n                args.map((item) =>{\r\n                    if(item.toString && item.toString().indexOf(\"[\") !== 0){\r\n                        return item.toString()\r\n                    }\r\n                    if(angular.isString(item)) return item;\r\n                    return JSON.stringify(item)\r\n                }).join(\"\\n\");\r\n            $error({\r\n                name:'Mediator script \"'+ $scope.widget.instanceName+'\" error',\r\n                message: messages\r\n            })\r\n        },\r\n\r\n        info: function(message){\r\n            $info(message)\r\n        },\r\n\r\n        splash: function(message){\r\n            splash(message)\r\n        },\r\n\r\n        dialog: function(form){\r\n            return dialog(form)\r\n        },\r\n\r\n        runDPS: function(params){\r\n        \r\n            let script = params.script;\r\n            let storage = params.state;\r\n            \r\n            let state = {\r\n                storage: storage,\r\n                locale: i18n.locale()\r\n            }\r\n\r\n            return $dps.post(\"/api/script\", {\r\n                        \"script\": script,\r\n                        \"state\": state\r\n                    })\r\n                    .then(function(response) {\r\n                        return {\r\n                            type: response.data.type,\r\n                            data: response.data.data\r\n                        }\r\n                    })    \r\n        }\r\n\r\n    }\r\n\r\n    $scope.run = function() {\r\n        try{\r\n            pageSubscriptions().removeListeners({\r\n                emitter: $scope.widget.instanceName\r\n            })\r\n\r\n            pageSubscriptions().removeListeners({\r\n                receiver: $scope.widget.instanceName\r\n            })\r\n            \r\n            $scope.$eval(eval(\"(function($scope){ \"\r\n                                +\"return (function(API, api, Api, $api){\" \r\n                                    + $scope.widget.script \r\n                                + \"})($scope._api, $scope._api, $scope._api, $scope._api)\"\r\n                                +\"})\"\r\n            ))\r\n        } catch(e) {\r\n           $error({\r\n                name:\"Mediator script \"+ $scope.widget.instanceName+' error',\r\n                message: e.toString()\r\n            }) \r\n        }    \r\n    }\r\n\r\n    $scope.runScript = function(){\r\n        app.markModified();\r\n        $scope.widget.script = $scope.getEditorScript();\r\n        $scope.run();\r\n    }\r\n\r\n    apiProvider\r\n        .config(() => {\r\n            if(!$scope.globalConfig.designMode)\r\n                $scope.run()\r\n        })\r\n        // .openCustomSettings(function() {\r\n        //     return dialog({\r\n        //             title: \"Mediator Script settings\",\r\n        //             fields: {\r\n        //                 listeners: {\r\n        //                     title: \"Listeners\",\r\n        //                     type: \"text\",\r\n        //                     value: $scope.widget.listeners,\r\n        //                     required: false\r\n        //                 }\r\n        //             }\r\n        //         })\r\n        //         .then(function(form) {\r\n        //             $scope.widget.listeners = form.fields.listeners.value;\r\n        //             $scope.widget.script = $scope.getEditorScript();\r\n        //         })\r\n        // })\r\n\r\n    .removal(() => {\r\n        console.log('Mediator widget is destroyed');\r\n    });\r\n})\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["v2.table/widget.js"],"names":[],"mappings":"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","file":"v2.table/widget.js","sourcesContent":["import angular from 'angular';\r\nimport \"custom-react-directives\";\r\nimport \"angular-oclazyload\";\r\nimport 'widgets/v2.table/wizard';\r\n\r\nconst m = angular.module('app.widgets.v2.table', [\r\n    \"oc.lazyLoad\",\r\n    \"custom-react-directives\",\r\n    'app.widgets.v2.table-wizard',\r\n    \"app.dps\"\r\n]);\r\n\r\n\r\nm.controller('TableCtrl', function(\r\n    $scope,\r\n    $http,\r\n    $dps,\r\n    $ocLazyLoad,\r\n    APIProvider,\r\n    pageSubscriptions,\r\n    TableWizard,\r\n    i18n,\r\n    $error) {\r\n\r\n    $ocLazyLoad.load({\r\n        files: [\r\n            \"/widgets/v2.table/data-widget.css\"\r\n        ]\r\n    });\r\n\r\n    $scope.select = () => {\r\n        let t = angular.copy($scope.table);\r\n\r\n        if ($scope.columnSelection) {\r\n            let indexes = []\r\n            t.header = t.header.filter((h, index) => {\r\n                let f = false;\r\n                h.metadata.forEach((m) => {\r\n                    f |= $scope.columnSelection.filter((s) => s.key == m.label && !s.disabled).length > 0\r\n                })\r\n                if (f) indexes.push(index)\r\n                return f;\r\n            })\r\n            t.body.forEach((r) => {\r\n                r.value = r.value.filter((v, index) => indexes.indexOf(index) >= 0)\r\n            })\r\n        }\r\n\r\n        if ($scope.rowSelection) {\r\n            t.body = t.body.filter((r) => {\r\n                let f = false;\r\n                r.metadata.forEach((m) => {\r\n                    f |= $scope.rowSelection.filter((s) => s.key == m.label && !s.disabled).length > 0\r\n                })\r\n                return f;\r\n            })\r\n        }\r\n\r\n        $scope.settings = { table: t, decoration: angular.copy($scope.decoration) }\r\n    }\r\n\r\n    $scope.update = function() {\r\n        $scope.pending = angular.isDefined($scope.widget.dataID);\r\n        if ($scope.pending) {\r\n            $dps.get(\"/api/data/process/\" + $scope.widget.dataID)\r\n                .success((resp) => {\r\n                    $scope.pending = false;\r\n                    $scope.table = resp.value;\r\n                    $scope.decoration = $scope.widget.decoration;\r\n                    $scope.settings = { table: angular.copy($scope.table), decoration: angular.copy($scope.decoration) }\r\n                })\r\n        } else {\r\n            if ($scope.widget.script) {\r\n                $dps\r\n                    .post(\"/api/script\", {\r\n                        \"script\": $scope.widget.script,\r\n                        \"locale\": i18n.locale()\r\n                    })\r\n                    .then((resp) => {\r\n                        if (resp.data.type == \"error\") {\r\n                            $error(resp.data.data)\r\n                            return\r\n                        };\r\n                        $scope.table = resp.data.data;\r\n                        $scope.decoration = $scope.widget.decoration;\r\n                        $scope.settings = { table: angular.copy($scope.table), decoration: angular.copy($scope.decoration) }\r\n                    })\r\n            } else {\r\n                $http.get(\"./widgets/v2.table/sample.json\")\r\n                    .success((resp) => {\r\n                        $scope.table = resp.value;\r\n                        $scope.decoration = $scope.widget.decoration;\r\n                        $scope.settings = { table: angular.copy($scope.table), decoration: angular.copy($scope.decoration) }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    new APIProvider($scope)\r\n        .config(() => {\r\n            // console.log($scope.widget)\r\n            if ($scope.widget.emitters && $scope.widget.emitters.length &&\r\n                $scope.widget.emitters.trim().length > 0) {\r\n                pageSubscriptions().removeListeners({\r\n                    receiver: $scope.widget.instanceName,\r\n                    signal: \"selectSerie\"\r\n                });\r\n                pageSubscriptions().removeListeners({\r\n                    receiver: $scope.widget.instanceName,\r\n                    signal: \"selectObject\"\r\n                });\r\n\r\n                $scope.emitters = ($scope.widget.emitters) ? $scope.widget.emitters.split(\",\") : [];\r\n\r\n\r\n                $scope.emitters = $scope.emitters.map((item) => {\r\n                    let l = item.trim().split(\".\")\r\n                    return { emitter: l[0], signal: l[1], slot: l[2], receiver: $scope.widget.instanceName }\r\n                })\r\n\r\n                pageSubscriptions().addListeners($scope.emitters)\r\n\r\n\r\n            } else {\r\n                pageSubscriptions().removeListeners({\r\n                    receiver: $scope.widget.instanceName,\r\n                    signal: \"selectSerie\"\r\n                });\r\n                pageSubscriptions().removeListeners({\r\n                    receiver: $scope.widget.instanceName,\r\n                    signal: \"selectObject\"\r\n                });\r\n            }\r\n            $scope.update();\r\n        }, true)\r\n\r\n    .openCustomSettings(function() {\r\n        $scope.wizard = TableWizard;\r\n        return $scope.wizard.start($scope);\r\n    })\r\n\r\n    .provide(\"selectRow\", (e, selection) => {\r\n        $scope.rowSelection = selection;\r\n        $scope.select();\r\n    })\r\n\r\n    .provide(\"selectColumn\", (e, selection) => {\r\n            $scope.columnSelection = selection;\r\n            $scope.select();\r\n        })\r\n        .provide('setData', (e, context) => {\r\n            // console.log(\"TABLE SET DATA\", context)\r\n            if (!context) {\r\n                $scope.hidden = true;\r\n                return\r\n            }\r\n            if (context.key == \"table\") {\r\n                $scope.dataset = context.dataset;\r\n                $scope.table = context.data;\r\n                $scope.hidden = false;\r\n                $scope.pending = false;\r\n                $scope.settings = { table: angular.copy($scope.table), decoration: angular.copy($scope.decoration) }\r\n            } else {\r\n                if ($scope.dataset != context.dataset) {\r\n                    $scope.hidden = true;\r\n                }\r\n            }\r\n\r\n        })\r\n        .provide('updateWithData', (e, context) => {\r\n            \r\n            if (!context) return\r\n\r\n            if (context.widget) {\r\n                context.widget = (context.widget.forEach) ? context.widget : [context.widget]\r\n            }\r\n\r\n            if (!context.widget || (context.widget.indexOf($scope.widget.instanceName) >= 0)) {\r\n\r\n                $scope.dataset = context.dataset;\r\n                $scope.table = context.data;\r\n                $scope.pending = false;\r\n                $scope.settings = { table: angular.copy($scope.table), decoration: angular.copy($scope.decoration) }\r\n                \r\n                if (context.options){\r\n                    $scope.hidden = context.options.hidden;\r\n                }\r\n            }\r\n\r\n\r\n\r\n        })\r\n        .provide('updateWithOptions', (e, context) => {\r\n            \r\n            if (!context) return\r\n\r\n            if (context.widget) {\r\n                context.widget = (context.widget.forEach) ? context.widget : [context.widget]\r\n            }\r\n\r\n            if (!context.widget || (context.widget.indexOf($scope.widget.instanceName) >= 0)) {\r\n                $scope.hidden = context.options.hidden;\r\n            }\r\n\r\n        })\r\n\r\n});\r\n"],"sourceRoot":"/source/"}
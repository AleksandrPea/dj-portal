{"version":3,"sources":["v2.nvd3-bar/bar-chart-decoration.js"],"names":[],"mappings":"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","file":"v2.nvd3-bar/bar-chart-decoration.js","sourcesContent":["import angular from 'angular';\r\nimport 'widgets/v2.nvd3-widget/nvd3-widget';\r\nimport \"widgets/v2.nvd3-bar/adapter\";\r\nimport \"wizard-directives\";\r\nimport 'ngReact';\r\nimport 'custom-react-directives';\r\nimport 'ng-prettyjson';\r\nimport 'ng-ace';\r\n\r\nvar m = angular.module(\"app.widgets.v2.steps.bar-chart-decoration\", [\r\n    'app.widgets.v2.nvd3-widget',\r\n    \"app.widgets.v2.bar-chart-adapter\",\r\n    \"wizard-directives\",\r\n    'app.dps',\r\n    \"ng.ace\"\r\n]);\r\n\r\nm.factory(\"BarChartDecoration\", [\r\n    \"$http\",\r\n    \"$dps\",\r\n    \"$q\",\r\n    \"parentHolder\",\r\n    \"BarChartAdapter\",\r\n    \"pageWidgets\",\r\n    \"i18n\",\r\n    \"dialog\",\r\n    \"$error\",\r\n    \"dpsEditor\",\r\n\r\n    function(\r\n        $http,\r\n        $dps,\r\n        $q,\r\n        parentHolder,\r\n        BarChartAdapter,\r\n        pageWidgets,\r\n        i18n,\r\n        dialog, \r\n        $error,\r\n        dpsEditor) {\r\n\r\n\r\n\r\n        return {\r\n            id: \"BarChartDecoration\",\r\n\r\n            title: \"Chart Decoration\",\r\n\r\n            description: \"Setup chart decoration options\",\r\n\r\n            html: \"./widgets/v2.nvd3-bar/bar-chart-decoration.html\",\r\n\r\n\r\n\r\n            onStartWizard: function(wizard) {\r\n                this.wizard = wizard;\r\n                this.conf = {\r\n                    decoration: wizard.conf.decoration,\r\n                    dataID: wizard.conf.dataID,\r\n                    script: wizard.conf.script,\r\n                    queryID: wizard.conf.queryID,\r\n                    serieDataId: wizard.conf.serieDataId,\r\n                    optionsUrl: \"./widgets/v2.nvd3-bar/options.json\",\r\n                    dataUrl: \"/api/data/script/\",\r\n                    emitters: wizard.conf.emitters\r\n                }\r\n\r\n                this.queries = [{$id:'eventSource', $title:'setData(updateWithData) event'}];\r\n\r\n                pageWidgets()\r\n                    .filter((item) => item.type == \"v2.query-manager\")\r\n                    .map((item) => item.queries)\r\n                    .forEach((item) => { this.queries = this.queries.concat(item) })\r\n\r\n                if (this.conf.queryID) {\r\n                    let thos = this;\r\n                    this.inputQuery = this.queries.filter((item) => item.$id == this.conf.queryID)[0].$title;\r\n                }\r\n            },\r\n\r\n            onFinishWizard: function(wizard) {\r\n                this.conf.decoration.setColor = undefined;\r\n                wizard.conf.decoration = this.conf.decoration;\r\n                wizard.conf.serieDataId = this.conf.serieDataId;\r\n                wizard.conf.queryID = this.conf.queryID;\r\n                wizard.conf.dataID = this.conf.dataID;\r\n                wizard.conf.emitters = this.conf.emitters;\r\n                wizard.conf.script = this.conf.script;\r\n\r\n                this.settings = { options: angular.copy(this.options), data: [] };\r\n                this.conf = {};\r\n            },\r\n\r\n            onCancelWizard: function(wizard) {\r\n                this.settings = { options: angular.copy(this.options), data: [] };\r\n                this.conf = {};\r\n            },\r\n\r\n            reversePalette: function() {\r\n                if (this.conf.decoration.color) {\r\n                    this.conf.decoration.color = this.conf.decoration.color.reverse();\r\n                }\r\n            },\r\n\r\n            selectInputData: function() {\r\n                let thos = this;\r\n                thos.wizard.context.postprocessedTable = undefined;\r\n                let iq = this.queries.filter((item) => item.$title == thos.inputQuery)[0];\r\n                this.conf.dataID = (iq.context) ? iq.context.queryResultId: undefined;\r\n                this.conf.queryID = iq.$id;\r\n                this.loadData();\r\n            },\r\n\r\n            loadOptions: function() {\r\n                return $http.get(this.conf.optionsUrl)\r\n            },\r\n\r\n            loadSeries: function() {\r\n                if (this.conf.dataID)\r\n                    return $dps\r\n                        .post(\"/api/data/script\", {\r\n                            \"data\": \"source(table:'\" + this.conf.dataID + \"');bar();save()\",\r\n                            \"locale\": i18n.locale()\r\n                        })\r\n\r\n                if (this.conf.script)\r\n                    return $dps.post(\"/api/script\", {\r\n                            \"script\": this.conf.script,\r\n                            \"locale\": i18n.locale()\r\n                        })\r\n                        .then((resp) => {\r\n                            if (resp.data.type == \"error\") {\r\n                                $error(resp.data.data)\r\n                                return\r\n                            };\r\n                            return { data: resp }\r\n                        })\r\n\r\n\r\n                return $http.get(\"./widgets/v2.nvd3-bar/sample.json\")\r\n            },\r\n\r\n            loadData: function() {\r\n                let thos = this;\r\n\r\n                if (!this.wizard.context.postprocessedTable) {\r\n                    $dps\r\n                        .get(\"/api/data/process/\" + this.conf.dataID)\r\n                        .success(function(resp) {\r\n                            thos.wizard.context.postprocessedTable = resp.value;\r\n                        })\r\n                }\r\n\r\n\r\n                this.optionsLoaded = //(this.optionsLoaded) ? this.optionsLoaded :\r\n                    this.loadOptions().then((options) => {\r\n                        thos.options = options.data;\r\n                        if (!thos.conf.decoration) {\r\n                            thos.conf.decoration = BarChartAdapter.getDecoration(thos.options);\r\n                        }\r\n\r\n                        thos.conf.decoration.setColor = (palette) => {\r\n                            thos.conf.decoration.color = angular.copy(palette)\r\n                        }\r\n                        thos.options.chart.x = function(d) {\r\n                            return d.label\r\n                        };\r\n                        thos.options.chart.y = function(d) {\r\n                            return d.value\r\n                        };\r\n\r\n                        thos.conf.decoration.width = parentHolder(thos.wizard.conf).width;\r\n\r\n\r\n                        //             thos.conf.decoration.title = thos.dataset.dataset.label;\r\n                        // thos.conf.decoration.subtitle = thos.dataset.dataset.source;\r\n                        // thos.conf.decoration.caption = 'Note:'+ thos.dataset.dataset.note;\r\n                        // thos.conf.decoration.xAxisName = thos.dataset.dataset.label;\r\n                        // thos.conf.decoration.yAxisName = thos.dataset.dataset.label;\r\n                    });\r\n                this.dataLoaded = //(this.dataLoaded) ? this.dataLoaded :\r\n                    this.loadSeries().then((resp) => {\r\n                        if (resp) {\r\n                            // console.log(resp)\r\n                            thos.data = resp.data.data.data;\r\n                            thos.conf.serieDataId = resp.data.data.data_id;\r\n                        }\r\n                    })\r\n\r\n                $q.all([this.optionsLoaded, this.dataLoaded]).then(() => {\r\n                    thos.apply()\r\n                });\r\n            },\r\n\r\n            activate: function(wizard) {\r\n                // this.dataset = wizard.context.dataset;\r\n                // if (this.conf.dataID) {\r\n                this.loadData();\r\n                // }\r\n            },\r\n\r\n            editScript: function() {\r\n                var thos = this;\r\n                dpsEditor(thos.conf.script)\r\n                    .then((script) => {\r\n                        thos.conf.script = script;\r\n                        thos.loadData();\r\n                    })\r\n            },\r\n\r\n            apply: function() {\r\n                this.conf.decoration.width = parentHolder(this.wizard.conf).width;\r\n                BarChartAdapter.applyDecoration(this.options, this.conf.decoration);\r\n                this.settings = { options: angular.copy(this.options), data: angular.copy(this.data) };\r\n            }\r\n        }\r\n    }\r\n]);\r\n"],"sourceRoot":"/source/"}
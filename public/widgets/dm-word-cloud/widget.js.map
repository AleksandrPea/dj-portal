{"version":3,"sources":["dm-word-cloud/widget.js"],"names":[],"mappings":"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","file":"dm-word-cloud/widget.js","sourcesContent":["import angular from 'angular';\r\nimport 'dictionary';\r\nimport \"d3\";\r\nimport \"d3.layout.cloud\"\r\n\r\n\r\n\r\n\r\n\r\nangular.module('app.widgets.dm-word-cloud', ['app.dictionary',\"app.dps\"])\r\n  .service(\"d3\", function(){return d3})\r\n  .controller('WordCloudController', function ( $scope, $http, $dps, EventEmitter, \r\n                                                      APIProvider, $lookup,$translate, \r\n                                                      $q, d3, pageSubscriptions) {\r\n    const eventEmitter = new EventEmitter($scope);\r\n\r\n    // function updateChart(containerID, ontology){\r\n\r\n    //   console.log(ontology);\r\n\r\n    //   d3.select(\"#\"+containerID).selectAll(\"svg\").remove();\r\n    //   d3.selectAll(\".\"+containerID+\"-overlay\").remove();\r\n      \r\n      \r\n    //   let width = d3.select(\"#\"+containerID).node().getBoundingClientRect().width,\r\n    //   height = width,\r\n    //   radius = 35,\r\n    //   padding = 30, // separation between same-color circles\r\n    //   clusterPadding = 6, // separation between different-color circles\r\n    //   maxRadius = 35,\r\n    //   minRadius = 10,\r\n    //   tickCount = 10;\r\n\r\n\r\n    //   var bounds = d3.geom.polygon([\r\n    //     [0, 0],\r\n    //     [0, height],\r\n    //     [width, height],\r\n    //     [width, 0]\r\n    //   ]);    \r\n\r\n    //   var svg = d3.select(\"#\"+containerID).insert(\"svg\")\r\n    //       .attr(\"width\", width)\r\n    //       .attr(\"height\", height)\r\n    //       .attr(\"style\",\"border:0.1rem solid green\")\r\n\r\n    //   // console.log(svg.node().getBoundingClientRect())\r\n\r\n\r\n    //   var rect = d3.select(\"#\"+containerID).node().getBoundingClientRect();\r\n    //   var overlay = d3.select(\"#\"+containerID).append(\"svg\")\r\n    //       .attr(\"width\", width)\r\n    //       .attr(\"height\", height)\r\n    //       .attr(\"class\",containerID+\"-overlay\")\r\n    //       .style(\"position\",\"absolute\")\r\n    //       .style(\"top\",0)\r\n    //       .style(\"left\",0)\r\n    //       .style(\"fill\",\"none\")\r\n    //       .style(\"pointer-events\",\"all\")\r\n    //       // .attr(\"stroke\",\"red\")\r\n    //       .style(\"z-index\", 3); \r\n\r\n    //   ontology.tags.forEach(function(n,i){\r\n    //       n.index = i;\r\n    //       n.radius = n.value; \r\n    //       // ontology.links.filter(function(l){\r\n    //       //       return l.target == n.index || l.source == n.index\r\n    //       //     }).length;\r\n    //   })\r\n\r\n    //   var values = ontology.tags.map(function(d){return d.radius})\r\n    //   var ticks = [d3.min(values)];\r\n    //   for(var i=1; i<=tickCount; i++) ticks.push(ticks[i-1]+(d3.max(values)-d3.min(values))/tickCount);\r\n\r\n    //   var round = function(value){\r\n    //     if(value <= ticks[0]) return ticks[0];\r\n    //     if(value >= ticks[ticks.length-1]) return ticks[ticks.length-1];\r\n    //     for(var i=0; i<ticks.length-1;i++){\r\n    //       if(ticks[i] <= value && value <= ticks[i+1]) \r\n    //         return (value-ticks[i] >= ticks[i+1]-value) ? ticks[i+1] : ticks[i];\r\n    //     }\r\n    //   }\r\n\r\n\r\n    //   var lvalues = ontology.links.map(function(l){return l.value})\r\n\r\n    //   var scale = d3.scale.ordinal()\r\n    //                   .domain(ticks)\r\n    //                   .rangePoints([minRadius,maxRadius])\r\n\r\n    //   var textScale = d3.scale.ordinal()\r\n    //                   .domain(scale.range())\r\n    //                   .rangePoints([10,18])\r\n\r\n    //   var textStrokeScale = d3.scale.ordinal()\r\n    //                   .domain(scale.range())\r\n    //                   .rangePoints([0.5,1])\r\n\r\n\r\n    //   var linkStrangeScale = d3.scale.linear()\r\n    //                   .domain([d3.min(lvalues),d3.max(lvalues)])\r\n    //                   .range([0,1])                \r\n\r\n    //   var linkStrokeScale = d3.scale.linear()\r\n    //                   .domain([d3.min(lvalues),d3.max(lvalues)])\r\n    //                   .range([2,5])                \r\n\r\n\r\n    //   var force = d3.layout.force()\r\n    //       .gravity(.3)\r\n    //     // .linkStrength(function(d){return linkStrangeScale(d.value)})\r\n    //     .distance(function(d){return 50-50*linkStrangeScale(d.value)/*50*(1/(d.value*d.value))*/})\r\n    //       .charge(-(0.1*width))\r\n    //       .size([width, height]);\r\n\r\n\r\n         \r\n    //   svg.append(\"defs\")\r\n    //         .selectAll()\r\n    //         .data(scale.range())\r\n    //         .enter()\r\n    //         .append(\"clipPath\")\r\n    //           .attr(\"class\",\"clip\")\r\n    //           .attr(\"id\", function(d){return \"clip\"+d})\r\n    //           .append(\"circle\")\r\n    //           .attr(\"r\", function(d){return d});    \r\n\r\n    //   svg = svg.append(\"g\")\r\n    //   overlay = overlay.append(\"g\")\r\n\r\n\r\n\r\n    //   ontology.tags.forEach(function(n){\r\n    //     n.radius = scale(round(n.radius))\r\n    //   })\r\n\r\n    //   force\r\n    //     .nodes(ontology.tags)\r\n    //     .links(ontology.links)\r\n    //     .start();\r\n\r\n    //   function nodeToNode(d) {\r\n    //       var deltaX = 0.5*(-d.source.x + d.target.x);\r\n    //       var deltaY = 0.5*(-d.source.y + d.target.y);\r\n           \r\n    //       var amx = []\r\n    //       if(deltaX >= deltaY){\r\n    //         amx.push({x:d.source.x+deltaX,y:d.source.y})\r\n    //         amx.push({x:d.target.x-deltaX,y:d.target.y})\r\n    //       }else{\r\n    //         amx.push({x:d.source.x,y:d.source.y+deltaY})\r\n    //         amx.push({x:d.target.x,y:d.target.y-deltaY})\r\n    //       }\r\n          \r\n    //       return \"M\" + d.source.x + \",\" + d.source.y\r\n    //            + \"C\" + amx[0].x + \",\" + amx[0].y\r\n    //            + \" \" + amx[1].x + \",\" + amx[1].y\r\n    //            + \" \" + d.target.x + \",\" + d.target.y;\r\n    //     }\r\n\r\n\r\n    //   var node = svg.selectAll(\".node\")\r\n    //         .data(ontology.tags)\r\n    //         .enter().append(\"g\")\r\n    //         .attr(\"class\", \"node\")\r\n\r\n    //       // node.append(\"image\")\r\n    //       //   .attr(\"xlink:href\",function(d){return d.icon})\r\n    //       //   .attr(\"x\", function(d){return -d.radius})\r\n    //       //   .attr(\"y\", function(d){return -d.radius})\r\n    //       //   .attr(\"width\", function(d){return d.radius*2})\r\n    //       //   .attr(\"height\", function(d){return d.radius*2})\r\n    //       //   .attr(\"opacity\",0.3)\r\n    //       //   .attr(\"clip-path\",function(d){return \"url(#clip\"+d.radius+\")\"})\r\n\r\n    //       node.append(\"text\")\r\n    //           .attr(\"dx\", function(d){2})\r\n    //           .attr(\"dy\", function(d){2})\r\n    //           .attr(\"font-size\",function(d){return textScale(d.radius)+\"px\"})\r\n    //           .attr(\"stroke\",\"#ddd\")\r\n    //           .attr(\"stroke-opacity\",\"1\")\r\n    //           .attr(\"stroke-width\",function(d){return textStrokeScale(d.radius)+\"px\"})\r\n    //           .text(function(d) { return d.tag });\r\n  \r\n    //       node.append(\"circle\")\r\n    //         .attr(\"r\", function(d){return 2})\r\n    //         .attr(\"cx\", 0)//function(d){return -d.radius})\r\n    //         .attr(\"cy\", 0)//function(d){return -d.radius})\r\n    //         .attr(\"stroke\",\"#ddd\")\r\n    //         // .attr(\"stroke-width\",\"2px\")\r\n    //         // .attr(\"fill\",\"none\")\r\n    //         // .attr(\"opacity\",0.4)\r\n            \r\n\r\n    //   var nodeClip = overlay.selectAll(\".node-clip\")\r\n    //         .data(ontology.tags)\r\n    //         .enter().append(\"circle\")\r\n    //         .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; })\r\n    //         .attr(\"class\", \"node-clip\")\r\n    //         .attr(\"r\", function(d){return d.radius*1.5})\r\n    //         .style(\"stroke-width\", 5)\r\n    //         .on(\"mouseover\", mouseover)\r\n    //         .on(\"mouseout\", mouseout);\r\n\r\n\r\n    //   var counter=0;\r\n    //   force.on(\"tick\", function() {\r\n    //     node.each(collide(.7));\r\n    //     nodeClip.each(collide(.7))\r\n    //     node\r\n    //     .attr(\"transform\", function(d) {\r\n    //      return \"translate(\" + d.x + \",\" + d.y + \")\"; \r\n    //     });\r\n        \r\n    //     nodeClip\r\n    //     .attr(\"transform\", function(d) {\r\n    //      return \"translate(\" + d.x + \",\" + d.y + \")\"; \r\n    //     });\r\n\r\n\r\n    //     var nodeX = ontology.tags.map(function(n){return n.x})\r\n    //     var nodeY = ontology.tags.map(function(n){return n.y})\r\n    //     svg.attr(\"transform\", function(d) {\r\n           \r\n    //        return \"translate(\" \r\n    //             + (width/2-(d3.min(nodeX)-25+(d3.max(nodeX)-d3.min(nodeX)+50)/2)) \r\n    //             + \",\" \r\n    //             + (-d3.min(nodeY)+50) \r\n    //             + \")\"; \r\n    //       });\r\n\r\n    //     overlay.attr(\"transform\", function(d) {\r\n    //        return \"translate(\" \r\n    //             + (width/2-(d3.min(nodeX)-25+(d3.max(nodeX)-d3.min(nodeX)+50)/2))\r\n    //             + \",\" \r\n    //             + (-d3.min(nodeY)+50) \r\n    //             + \")\"; \r\n    //       });\r\n    //   });\r\n\r\n\r\n    //   // Resolves collisions between d and all other circles.\r\n    //   function collide(alpha) {\r\n    //     var quadtree = d3.geom.quadtree(ontology.tags);\r\n    //     return function(d) {\r\n    //       var r = d.radius + maxRadius + Math.max(padding, padding),\r\n    //           nx1 = d.x - r,\r\n    //           nx2 = d.x + r,\r\n    //           ny1 = d.y - r,\r\n    //           ny2 = d.y + r;\r\n    //       quadtree.visit(function(quad, x1, y1, x2, y2) {\r\n    //         if (quad.point && (quad.point !== d)) {\r\n    //           var x = d.x - quad.point.x,\r\n    //               y = d.y - quad.point.y,\r\n    //               l = Math.sqrt(x * x + y * y),\r\n    //               r = d.radius+ quad.point.radius + padding;\r\n    //           if (l < r) {\r\n    //             l = (l - r) / l * alpha;\r\n    //             d.x -= x *= l;\r\n    //             d.y -= y *= l;\r\n    //             quad.point.x += x;\r\n    //             quad.point.y += y;\r\n    //           }\r\n    //         }\r\n    //         return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;\r\n    //       });\r\n    //     };\r\n    //   }\r\n\r\n\r\n    //   for(;force.alpha()>0.01;){\r\n    //     force.tick();\r\n    //   }\r\n    //   force.stop();\r\n\r\n\r\n\r\n    //   function mouseover(d) {\r\n\r\n    //     node.selectAll(\"image\").attr(\"opacity\",0);\r\n\r\n    //     var g = svg.insert(\"g\", \".g-highligth\")\r\n    //               .attr(\"class\",\"linkA\");\r\n    //     var selectedLinks = ontology.links.filter(\r\n    //           function(l){\r\n    //             return l.target.tag == d.tag || l.source.tag == d.tag\r\n    //           })\r\n    //     var selectedNodes = selectedLinks.map(\r\n    //         function(l){\r\n    //           return (l.target.tag == d.tag) ? l.source : l.target; \r\n    //         }\r\n    //       )\r\n    //     var selectedText = selectedLinks.map(\r\n    //         function(l){\r\n    //           return (l.target.tag == d.tag) ? l.source : l.target; \r\n    //         }\r\n    //       )\r\n\r\n    //     selectedNodes.push(d);\r\n    //     selectedText.push(d);\r\n\r\n    //      g.selectAll(\"path\")\r\n    //         .data(selectedLinks)\r\n    //         .enter()\r\n    //         .append(\"path\")\r\n    //           .attr(\"d\", nodeToNode)\r\n    //           .attr(\"stroke-width\",function(d){return linkStrokeScale(d.value)+\"px\"})\r\n    //           .style(\"stroke-dasharray\", \"0,250\")\r\n    //           .attr(\"stroke-opacity\",0.1)\r\n    //           .style(\"stroke\",\"black\")//\"rgb(34, 121, 179)\")\r\n    //           .style(\"fill\",\"none\")\r\n\r\n    //         .transition()\r\n    //           .ease(\"cubic-in\")\r\n    //           .style(\"stroke-dasharray\", \"250,250\")\r\n    //         .duration(500);\r\n        \r\n    //     var gn = g.insert(\"g\", \".g-highligth\")\r\n\r\n    //     var gnn = gn.selectAll(\"g\",\".node\")\r\n    //         .data(selectedNodes)\r\n    //         .enter().append(\"g\").attr(\"class\",\"node\");\r\n\r\n    //         // gnn.append(\"image\")\r\n    //         //   .attr(\"xlink:href\", function(d){return d.icon})\r\n    //         //   .attr(\"x\",function(d){return -d.radius})\r\n    //         //   .attr(\"y\",function(d){return -d.radius})\r\n    //         //   .attr(\"width\", function(d){return d.radius*2})\r\n    //         //   .attr(\"height\", function(d){return d.radius*2})\r\n    //         //   .attr(\"opacity\",1)\r\n    //         //   .attr(\"clip-path\",function(d){return \"url(#clip\"+d.radius+\")\"})\r\n    //         //   .attr(\"transform\", function(d) {return \"translate(\" + d.x + \",\" + d.y + \")\";}) \r\n    //         //   .transition()\r\n    //         //   .ease(\"cubic-in\")\r\n    //         //     .attr(\"opacity\", \"0\")\r\n    //         //   .duration(500);\r\n              \r\n           \r\n    //         gnn = gn.selectAll(\".text\")\r\n    //         .data(selectedNodes)\r\n    //         .enter()\r\n    //         .append(\"g\").attr(\"class\",\"text\");\r\n        \r\n    //         gnn.append(\"text\")\r\n    //           .attr(\"dx\", function(d){return d.x})//d.radius-d.radius/2})\r\n    //           .attr(\"dy\", function(d){return d.y})//d.radius-d.radius/3})\r\n    //           .attr(\"font-size\",function(d){return textScale(d.radius)+\"px\"})\r\n    //           .attr(\"stroke\",\"white\")\r\n    //           .attr(\"stroke-opacity\",\"0.8\")\r\n    //           .attr(\"stroke-width\", \"3px\")\r\n    //           .text(function(d) { return d.tag });\r\n\r\n    //         gnn.append(\"text\")\r\n    //           .attr(\"dx\", function(d){return d.x})//d.radius-d.radius/2})\r\n    //           .attr(\"dy\", function(d){return d.y})//d.radius-d.radius/3})\r\n    //           .attr(\"font-size\",function(d){return textScale(d.radius)+\"px\"})\r\n    //           .attr(\"stroke\",function(d,i){\r\n    //                   return (i < selectedNodes.length-1) ? \"rgb(34, 121, 179)\" : \"red\"\r\n    //           })\r\n    //           .attr(\"stroke-opacity\",\"0\")\r\n    //           .attr(\"stroke-width\",function(d){return textStrokeScale(d.radius)+\"px\"})\r\n    //           .text(function(d) { return d.tag })\r\n    //          .transition()\r\n    //           .ease(\"cubic-in\")\r\n    //             .attr(\"stroke-opacity\", \"1\")\r\n    //           .duration(500);\r\n\r\n    //         // node.selectAll(\"text\")\r\n    //         //   .attr(\"stroke-opacity\",\"0.3\")\r\n    //         //   .transition()\r\n    //         //   .ease(\"cubic-in\")\r\n    //         //    .attr(\"stroke-opacity\", \"0\")\r\n    //         //   .duration(500);\r\n                \r\n               \r\n\r\n    //   }  \r\n\r\n    //   function mouseout(d) {\r\n    //      // node.selectAll(\"image\").attr(\"opacity\",0)\r\n    //      // .transition()\r\n    //      //      .ease(\"cubic-in\")\r\n    //      //      .attr(\"opacity\", 1)\r\n    //      //    .duration(500);\r\n\r\n    //       d3.selectAll(\".linkA\")\r\n    //           .remove();\r\n    //   }\r\n\r\n    // }\r\n    \r\n\r\n    function updateChart(containerID, ontology){\r\n      var tickCount = 10;\r\n      \r\n\r\n      var values = ontology.tags.map(function(l){return l.value})\r\n      var lvalues = ontology.links.map(function(l){return l.value})\r\n      \r\n      \r\n      var scale = d3.scale.linear()\r\n                      .domain([d3.min(values),d3.max(values)])\r\n                      .range([10,32])\r\n\r\n      \r\n      // var textScale = d3.scale.ordinal()\r\n      //                 .domain(scale.range())\r\n      //                 .rangePoints([10,18])\r\n\r\n      // var textStrokeScale = d3.scale.ordinal()\r\n      //                 .domain(scale.range())\r\n      //                 .rangePoints([0.5,1])\r\n\r\n\r\n      // var linkStrangeScale = d3.scale.linear()\r\n      //                 .domain([d3.min(lvalues),d3.max(lvalues)])\r\n      //                 .range([0,1])                \r\n\r\n      var linkStrokeScale = d3.scale.linear()\r\n                      .domain([d3.min(lvalues),d3.max(lvalues)])\r\n                      .range([2,8])   \r\n\r\n      var words = ontology.tags.map((item,i) => {\r\n        return {\r\n          text  : item.tag,\r\n          size  : Math.round(scale(item.value)), \r\n          index : i,\r\n          key   : item.key,\r\n          property : item.property,\r\n          query : item.query\r\n        }\r\n      })\r\n      console.log(\"words\", words)\r\n      var links = ontology.links.map((item) => {\r\n        return {\r\n                  source:words[item.source], \r\n                  target:words[item.target], \r\n                  value:linkStrokeScale(item.value)\r\n               }\r\n      })\r\n\r\n      var width = d3.select(\"#\"+containerID + '-cloud').node().getBoundingClientRect().width;\r\n\r\n      d3.layout.cloud()\r\n        .size([width, width])\r\n        .padding(7)\r\n        .words(words)\r\n        .rotate(0)//function() { return ~~(Math.random()*2) * 90;}) // 0 or 90deg\r\n        .fontSize(function(d) { return d.size; })\r\n        .on('end', drawCloud)\r\n        .start();\r\n\r\n      \r\n      function drawCloud(words) {\r\n         d3.select('#'+containerID+'-cloud').selectAll(\"svg\").remove();\r\n\r\n        var labels = d3.select('#'+containerID+'-cloud').append('svg')\r\n          .attr('width', width).attr('height', width)\r\n          .append('g')\r\n          .selectAll('text')\r\n          .data(words)\r\n          .enter()\r\n          .append('text')\r\n          .style('font-size', function(d) { return d.size + 'px'; })\r\n          // .style('font-family', function(d) { return d.font; })\r\n          .style('fill', function(d, i) { return \"#999999\"})\r\n          .style(\"cursor\",\"pointer\")\r\n          .attr('text-anchor', 'middle')\r\n          .attr('transform', function(d) {\r\n            return 'translate(' + (width/2-d.x)+\",\" + (width/2-d.y) + ')'//rotate(' + d.rotate + ')';\r\n          })\r\n          .text(function(d) { return d.text; })\r\n          .on(\"mouseover\", mouseover)\r\n          .on(\"mouseout\", mouseout)\r\n          .on(\"click\",click);\r\n\r\n\r\n\r\n\r\n          var svg = d3.select('#'+containerID+'-cloud').select(\"svg\");\r\n          var g = svg.select(\"g\");\r\n          var rect = g.node().getBBox();\r\n\r\n          g.attr(\"transform\", function(d) {\r\n           \r\n           return \"translate(\" \r\n                + (width/2-(rect.x+rect.width/2)) \r\n                + \",\" \r\n                + (-rect.y) \r\n                + \")\"; \r\n          });\r\n          svg.attr(\"height\",rect.height);\r\n\r\n         \r\n         function mouseover(cd) {\r\n          \r\n          var connectedWords = [];\r\n          links.forEach((item) => {\r\n            if(item.source.index == cd.index){\r\n                connectedWords.push(item.target)\r\n            }\r\n            if(item.target.index == cd.index){\r\n                connectedWords.push(item.source)\r\n            }\r\n          }) \r\n\r\n         \r\n          d3.select(this)\r\n            .transition()\r\n              .ease(\"cubic-in\")\r\n                .style(\"fill\",\"#CF2A0E\")\r\n              .duration(500);\r\n\r\n\r\n            labels\r\n            .filter((d) => {\r\n              return connectedWords.filter((w) => {\r\n                return w.index == d.index\r\n              }).length > 0\r\n            })\r\n            .transition()\r\n              .ease(\"cubic-in\")\r\n                .style(\"fill\",\"rgb(34, 121, 179)\")\r\n               .duration(500);\r\n\r\n            labels\r\n            .filter((d) => {\r\n              return connectedWords.filter((w) => {\r\n                return w.index == d.index\r\n              }).length == 0 && d.index != cd.index\r\n            })\r\n            .transition()\r\n              .ease(\"cubic-in\")\r\n                .style(\"fill-opacity\", 0)\r\n               .duration(500);       \r\n        }\r\n\r\n        function mouseout(d) {\r\n          labels\r\n          .transition()\r\n              .ease(\"cubic-in\")\r\n                .style(\"fill\", \"#999999\")\r\n                .style(\"fill-opacity\",1)\r\n               .duration(100);  \r\n        }\r\n\r\n        function click(d){\r\n          console.log(\"click\",d)\r\n          eventEmitter.emit('setLookupKey', d.key);\r\n          // let tmp = {};\r\n          // tmp[d.property.split(\".\").slice(1).join(\".\")] = [{includes:d.key}];\r\n          // let query = [tmp];\r\n          let query = d.query.split(\"{{}}\").join(d.key)\r\n          eventEmitter.emit('searchQuery', query);\r\n        } \r\n\r\n\r\n       } \r\n\r\n\r\n\r\n    }\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n    \r\n    $scope.refresh = function(){\r\n      load();\r\n    }\r\n\r\n    var defaultIcon = {\r\n      author : \"./img/author.png\",\r\n      topic  : \"./img/topic.png\",\r\n      source : \"./img/source.png\",\r\n      indicator : \"./img/indicator.png\"\r\n    }\r\n\r\n    function translate(){\r\n      \r\n      $scope.nodes = [];\r\n      $scope.links = [];\r\n      $scope.ontology.links.forEach( (item) => {\r\n        $scope.links.push({\r\n          source : item.source,\r\n          target : item.target,\r\n          value  : item.value\r\n        })\r\n      }) \r\n      \r\n      $scope.ontology.tags.forEach((item) => {\r\n        let obj = $lookup(item.tag); \r\n        $scope.nodes.push({\r\n          tag: (obj.label) ? obj.label : item.tag,\r\n          key: item.tag,\r\n          property: item.property,\r\n          query: item.query,\r\n          icon: (obj.icon) ? obj.icon : defaultIcon[item.meta],\r\n          meta: item.meta,\r\n          value:item.value\r\n        })\r\n      });\r\n    \r\n      let translatePromises = [];\r\n      \r\n      $scope.nodes.forEach((item) => {  \r\n          translatePromises.push($translate(item.tag).then((translation) => {item.tag = translation}))\r\n      })\r\n\r\n      $q.all(translatePromises).then(() => {\r\n        $scope.resp = $scope.nodes;\r\n         // $scope.visibility = true;\r\n        setTimeout(function(){\r\n            updateChart($scope.cloudContainerID, {tags:$scope.nodes, links:$scope.links})\r\n        },0);    \r\n       \r\n      })\r\n    }\r\n\r\n\r\n    function load(){\r\n     \r\n      // $http.post(\"./api/metadata/tag/dependencies\",\r\n        $dps.post(\"/api/metadata/tag/dependencies\",\r\n          {\r\n            \"status\":\"public\",\r\n            \"tags\":[\r\n                  {\r\n                    \"meta\":\"indicator\",\r\n                    \"property\":\"$..metadata.dimension.concept.values..label\",\r\n                    \"query\":\"$[?(@.dimension.concept.values.contains(function(d){return d.label.startWith('{{}}')}))]\"\r\n                  },\r\n                  {\r\n                    \"meta\":\"topic\",\r\n                    \"property\":\"$..metadata.dataset.topics\",\r\n                    \"query\":\"$[?(@.dataset.topics.contains(function(d){return d.startWith('{{}}')}))]\"\r\n                  },\r\n                  {\r\n                    \"meta\":\"source\",\r\n                    \"property\":\"$..metadata.dataset.source\",\r\n                    \"query\":\"$[?(@.dataset.source.startWith('{{}}'))]\"\r\n                  }\r\n              ]\r\n          }\r\n      ).success(function(resp){\r\n            $scope.ontology = resp;\r\n            translate();\r\n      });\r\n  }     \r\n\r\n\r\n   var addListener = function(listener){\r\n        var subscriptions = pageSubscriptions();\r\n        for (var i in subscriptions) {\r\n          if (subscriptions[i].emitter === listener.emitter \r\n            && subscriptions[i].receiver === listener.receiver\r\n            && subscriptions[i].signal === listener.signal\r\n            && subscriptions[i].slot === listener.slot\r\n            ) {\r\n            return;\r\n          }\r\n        }\r\n        subscriptions.push(listener);\r\n      };\r\n      \r\n    var removeListener = function(listener){\r\n        var subscriptions = pageSubscriptions();\r\n        for (var i in subscriptions) {\r\n          if (subscriptions[i].emitter === listener.emitter \r\n            && subscriptions[i].receiver === listener.receiver\r\n            && subscriptions[i].signal === listener.signal\r\n            && subscriptions[i].slot === listener.slot\r\n            ) {\r\n            subscriptions.splice(i, 1);\r\n            return\r\n          }\r\n        }\r\n      };\r\n\r\n\r\n    $scope.visibility = false;\r\n    \r\n    new APIProvider($scope)\r\n      .config(() => {\r\n        console.log(`widget ${$scope.widget.instanceName} is (re)configuring...`);\r\n          $scope.cloudContainerID =\"cloud-\"+$scope.widget.instanceName;\r\n\r\n          $scope.lookupListeners = ($scope.widget.lookupListeners) ? $scope.widget.lookupListeners.split(\",\") : [];\r\n          \r\n         pageSubscriptions().removeListeners({\r\n              emitter: $scope.widget.instanceName,\r\n              signal: \"setLookupKey\"\r\n          })\r\n\r\n            pageSubscriptions().addListeners(\r\n              $scope.lookupListeners.map((item) =>{\r\n                return {\r\n                    emitter: $scope.widget.instanceName,\r\n                    receiver: item.trim(),\r\n                    signal: \"setLookupKey\",\r\n                    slot: \"setLookupKey\"\r\n                }\r\n              })\r\n            );\r\n \r\n\r\n          // for(var i in $scope.lookupListeners){\r\n          //   $scope.lookupListeners[i] = $scope.lookupListeners[i].trim();\r\n          //   // console.log($scope.widget.instanceName,$scope.lookupListeners[i]);\r\n          //   addListener({\r\n          //         emitter: $scope.widget.instanceName,\r\n          //         receiver: $scope.lookupListeners[i],\r\n          //         signal: \"setLookupKey\",\r\n          //         slot: \"setLookupKey\"\r\n          //       });\r\n          // }\r\n\r\n          $scope.searchListeners = ($scope.widget.searchListeners) ? $scope.widget.searchListeners.split(\",\") : [];\r\n          \r\n          pageSubscriptions().removeListeners({\r\n              emitter: $scope.widget.instanceName,\r\n              signal: \"searchQuery\"\r\n          })\r\n\r\n            pageSubscriptions().addListeners(\r\n              $scope.searchListeners.map((item) =>{\r\n                return {\r\n                    emitter: $scope.widget.instanceName,\r\n                    receiver: item.trim(),\r\n                    signal: \"searchQuery\",\r\n                    slot: \"searchQuery\"\r\n                }\r\n              })\r\n            );\r\n          \r\n          // for(var i in $scope.searchListeners){\r\n          //   $scope.searchListeners[i] = $scope.searchListeners[i].trim();\r\n          //   // console.log($scope.widget.instanceName,$scope.searchListeners[i]);\r\n          //   addListener({\r\n          //         emitter: $scope.widget.instanceName,\r\n          //         receiver: $scope.searchListeners[i],\r\n          //         signal: \"searchQuery\",\r\n          //         slot: \"searchQuery\"\r\n          //       });\r\n\r\n           pageSubscriptions().removeListeners({\r\n              receiver:  $scope.widget.instanceName,\r\n              signal: \"slaveVisibility\",\r\n          })\r\n\r\n          if($scope.widget.masterWidget){\r\n            addListener({\r\n                  emitter:$scope.widget.masterWidget,\r\n                  receiver:  $scope.widget.instanceName,\r\n                  signal: \"slaveVisibility\",\r\n                  slot: \"slaveVisibility\"\r\n              });\r\n          }   \r\n\r\n\r\n\r\n        load();\r\n      })\r\n      .provide('refresh', (evt) => {$scope.refresh()})\r\n      .provide(\"slaveVisibility\", (evt, value) => {\r\n        // console.log(\"slaveVisibility\",evt, value)\r\n        $scope.visibility = value;\r\n      })\r\n      .translate( () => {translate()})\r\n      .removal( () => { console.log('Tag Cloud widget is destroyed')});\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}
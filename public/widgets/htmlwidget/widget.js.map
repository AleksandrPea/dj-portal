{"version":3,"sources":["htmlwidget/widget.js"],"names":[],"mappings":"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","file":"htmlwidget/widget.js","sourcesContent":["import angular from 'angular';\r\nangular.module('app.widgets.htmlwidget', [])\r\n    .controller('HtmlWidgetController', function(\r\n        $scope,\r\n        $http,\r\n        $dps,\r\n        EventEmitter,\r\n        APIProvider,\r\n        pageSubscriptions,\r\n        $lookup,\r\n        $translate,\r\n        $modal,\r\n        user,\r\n        i18n,\r\n        $scroll,\r\n        clipboard,\r\n        dialog,\r\n        $error,\r\n        log,\r\n        instanceNameToScope,\r\n        config,\r\n        $info,\r\n        app,\r\n        $sce\r\n        ) {\r\n\r\n\r\n        const eventEmitter = new EventEmitter($scope);\r\n        const apiProvider = new APIProvider($scope);\r\n\r\n        \r\n        $scope.$api = $scope.api = $scope.Api = $scope.API = {\r\n\r\n\r\n            widget: function(widgetName) {\r\n                return instanceNameToScope.get(widgetName)\r\n            },\r\n\r\n            config: () => config,\r\n            user: () => user,\r\n            app: () => app,\r\n            logIn: () => logIn,\r\n\r\n            provide: function(params) {\r\n                let event = params.event;\r\n                let widgets = params.widgets;\r\n                let callback = params.callback;\r\n                widgets = widgets || [];\r\n                widgets = (widgets.forEach) ? widgets : [widgets]\r\n\r\n                apiProvider.provide(event, callback)\r\n\r\n                widgets.forEach((w) => {\r\n\r\n                    pageSubscriptions().removeListeners({\r\n                        emitter: w,\r\n                        receiver: $scope.widget.instanceName,\r\n                        signal: event,\r\n                        slot: event\r\n                    })\r\n\r\n                    pageSubscriptions().addListener({\r\n                        emitter: w,\r\n                        receiver: $scope.widget.instanceName,\r\n                        signal: event,\r\n                        slot: event\r\n                    })\r\n                })\r\n            },\r\n\r\n            addListeners: function(params) {\r\n                let event = params.event;\r\n                let widgets = params.widgets;\r\n                widgets = widgets || [];\r\n                widgets = (widgets.forEach) ? widgets : [widgets]\r\n                widgets.forEach((w) => {\r\n\r\n                    pageSubscriptions().removeListeners({\r\n                        emitter: $scope.widget.instanceName,\r\n                        receiver: w,\r\n                        signal: event,\r\n                        slot: event\r\n                    })\r\n\r\n                    pageSubscriptions().addListener({\r\n                        emitter: $scope.widget.instanceName,\r\n                        receiver: w,\r\n                        signal: event,\r\n                        slot: event\r\n                    })\r\n                })\r\n            },\r\n\r\n            emit: function(event, data) {\r\n                eventEmitter.emit(event, data)\r\n            },\r\n\r\n            error: function(...args){\r\n                let messages = \r\n                    args.map((item) =>{\r\n                        if(item.toString && item.toString().indexOf(\"[\") !== 0){\r\n                            return item.toString()\r\n                        }\r\n                        if(angular.isString(item)) return item;\r\n                        return JSON.stringify(item)\r\n                    }).join(\"\\n\");\r\n                $error({\r\n                    name:'Mediator script \"'+ $scope.widget.instanceName+'\" error',\r\n                    message: messages\r\n                })\r\n            },\r\n\r\n            info: function(message){\r\n                $info(message)\r\n            },\r\n\r\n            splash: function(message){\r\n                splash(message)\r\n            },\r\n\r\n            dialog: function(form){\r\n                return dialog(form)\r\n            },\r\n\r\n            runDPS: function(params){\r\n            \r\n                let script = params.script;\r\n                let storage = params.state;\r\n                \r\n                let state = {\r\n                    storage: storage,\r\n                    locale: i18n.locale()\r\n                }\r\n\r\n                return $dps.post(\"/api/script\", {\r\n                            \"script\": script,\r\n                            \"state\": state\r\n                        })\r\n                        .then(function(response) {\r\n                            return {\r\n                                type: response.data.type,\r\n                                data: response.data.data\r\n                            }\r\n                        })    \r\n            }\r\n\r\n        }\r\n\r\n        $scope.update = function(data){\r\n            let container = ($scope.globalConfig.designMode)\r\n                        ? $scope.container.getElement().find('div')[2]\r\n                        : $scope.container.getElement().find('div')[1];\r\n\r\n            container.innerHTML = '';\r\n            let content = angular.element('<div>'+data+'</div>')[0];\r\n            \r\n            angular.element(container).append(content)                                \r\n            angular.element(container)\r\n                    .injector()\r\n                    .invoke(function($compile) {\r\n                          var scope = angular.element(content).scope();\r\n                          $compile(content)(scope);\r\n                    });\r\n        }\r\n\r\n        apiProvider\r\n            .config(() => {\r\n                $scope.update($scope.widget.text)\r\n                // $scope.test = \"TEST\";\r\n                // $scope.API = $scope.API;\r\n                // $scope.text = $sce.trustAsHtml($scope.widget.text);\r\n            })\r\n\r\n            .provide('updateWithData', (e, context) => {\r\n                if (!context) return\r\n\r\n                if (context.widget) {\r\n                    context.widget = (context.widget.forEach) ? context.widget : [context.widget]\r\n                }\r\n\r\n                if (!context.widget || (context.widget.indexOf($scope.widget.instanceName) >= 0)) {\r\n                     $scope.update(context.data)\r\n                    \r\n\r\n                    if (context.options){\r\n                        $scope.hidden = context.options.hidden;\r\n                    }\r\n                }\r\n\r\n\r\n            })\r\n\r\n            .provide('updateWithOptions', (e, context) => {\r\n                if (!context) return\r\n\r\n                if (context.widget) {\r\n                    context.widget = (context.widget.forEach) ? context.widget : [context.widget]\r\n                }\r\n\r\n                if (!context.widget || (context.widget.indexOf($scope.widget.instanceName) >= 0)) {\r\n\r\n                    $scope.hidden = context.options.hidden;\r\n                }\r\n            })\r\n\r\n            .provide('setData', (e, context) => {\r\n                if (!context) {\r\n                    $scope.text = \"\"\r\n                        // $scope.container.getElement()[0].children[0].children[0].innerHTML = \"\";\r\n                    $scope.hidden = true;\r\n                    return\r\n                }\r\n                if (context.key == \"html\") {\r\n                    $scope.update(context.data)\r\n                    // $scope.text = $sce.trustAsHtml(context.data)\r\n                        // $scope.container.getElement()[0].children[0].children[0].innerHTML = context.data;\r\n                    $scope.hidden = false;\r\n                } else {\r\n                    $scope.hidden = true;\r\n                    $scope.text = \"\"\r\n                        // $scope.container.getElement()[0].children[0].children[0].innerHTML = \"\";\r\n                }\r\n            })\r\n\r\n    });\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["v2.script-result/widget.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,kBAAkB,UAAU,KAAK,EAAE,OAAO,OAAO,IAAI,aAAa,IAAI,aAAa;;AAEvF,IAJO,UAAO,gBAAA,QAAM;;AAMpB,QALO;;AAOP,QANO;;AAEP,QAAQ,IAAI,eAAe;AAC3B,IAAI,IAAI,QAAQ,OAAO,gCAAgC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCxD,IAAI,WAAW,SAAA,SAAS,SAAQ;IAC5B,IAAG,CAAC,QAAO,OAAO,QAAQ,QAAQ,QAAO,GAAG;QACxC,OAAO,GAAG,IAAI,QAAQ;;IAE1B,IAAG,QAAQ,SAAS,QAAQ,OAAM;QAC9B,OAAO,QAAQ;;IAEnB,OAAO,GAAG,KAAK,QAAQ;;;AAM3B,EAAE,WAAW,oDACT,UAAS,QAAQ,aAAa;;IAE9B,OAAO,WAAW;QACd,SAAQ;YACJ,MAAM;YACN,OAAO;;QAEX,MAAM;QACN,MAAM;;;IAGV,IAAI,gBAAgB;QAChB,MAAgB;QAChB,QAAgB;QAChB,KAAgB;QAChB,KAAgB;QAChB,YAAgB;QAChB,MAAgB;QAChB,QAAgB;QAChB,YAAgB;QAChB,KAAgB;QAChB,SAAgB;;IAGpB,IAAI,YAAY;QACZ,MAAgB;QAChB,MAAgB;QAChB,MAAgB;QAChB,OAAgB;QAChB,OAAgB;QAChB,KAAgB;QAChB,MAAgB;QAChB,MAAgB;QAChB,MAAgB;QAChB,SAAgB;QAChB,OAAgB;QAChB,MAAgB;QAChB,KAAgB;;;IAIpB,IAAI,YAAY,QACX,OAAO,YAAM;QACV,QAAQ,IAAG,YAAW,OAAO,OAAO,eAAY;OAEnD,QAAQ,WAAW,UAAC,GAAG,SAAY;QAChC,IAAI,CAAC,SAAS;YACV,OAAO,SAAS;YAChB;;;QAGJ,IAAI,OAAO,cAAc,QAAQ;;QAEjC,IAAG,OAAO,OAAO,WAAU;YACvB,OAAO,QAAQ,UAAU,QAAQ;;;QAGrC,IAAG,MAAK;YACJ,OAAO,SAAS;YAChB,OAAO,WAAW;gBACd,SAAQ;oBACJ,MAAM;oBACN,OAAO;;gBAEX,MAAM,QAAQ;gBACd,MAAM,SAAS;;eAElB;YACD,OAAO,SAAS;;OAIvB,QAAQ,YAAM;QACX,QAAQ,IAAI;;IAEtB","file":"v2.script-result/widget.js","sourcesContent":["import angular from 'angular';\r\nimport 'ng-ace';\r\nimport \"pretty-data\";\r\n\r\nconsole.log(\"pretty-data\", pd)\r\nlet m = angular.module('app.widgets.v2.script-result', ['ng.ace'])\r\n\r\n\r\n// var rx = {\r\n//     entities: /((&)|(<)|(>))/g,\r\n//     json: /\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|(null))\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g\r\n// };\r\n// // mapping of chars to entities\r\n// var entities = ['&amp;','&lt;','&gt;'];\r\n// // lookup of positional regex matches in rx.json to CSS classes\r\n// var classes = ['number','string','key','boolean','null'];\r\n// var reverseCoalesce = function reverseCoalesce() {\r\n//     var i = arguments.length - 2;\r\n//     do {\r\n//       i--;\r\n//     } while (!arguments[i]);\r\n//     return i;\r\n//   };\r\n\r\n// var markup = function markup(match) {\r\n//     var idx;\r\n//       // the final two arguments are the length, and the entire string itself;\r\n//       // we don't care about those.\r\n//       if (arguments.length < 7) {\r\n//         throw new Error('markup() must be called from String.prototype.replace()');\r\n//       }\r\n//       idx = reverseCoalesce.apply(null, arguments);\r\n//       return match;\r\n//     };\r\n\r\n// var makeEntities = function makeEntities() {\r\n//     var idx;\r\n//     if (arguments.length < 5) {\r\n//       throw new Error('makeEntities() must be called from String.prototype.replace()');\r\n//     }\r\n//     idx = reverseCoalesce.apply(null, arguments);\r\n//     return entities[idx - 2];\r\n//   };\r\n        \r\nvar prettify = function(context){\r\n    if(['html','xml'].indexOf(context.key) >=0 ){\r\n        return pd.xml(context.data)\r\n    }\r\n    if(angular.isString(context.data)){\r\n        return context.data\r\n    }\r\n    return pd.json(context.data)\r\n}\r\n\r\n\r\n\r\n\r\nm.controller('ScriptResultController', \r\n    function($scope, APIProvider) {\r\n    \r\n    $scope.settings = {\r\n        options:{\r\n            mode: 'text',\r\n            theme: 'tomorrow'\r\n        },\r\n        type: 'text',\r\n        data: 'Script Result Viewer\\n Supported types: text, xml, html, csv, javascript, json, dps'\r\n    }\r\n\r\n    var supportedMode = {\r\n        text:           \"text\", \r\n        string:         \"text\", \r\n        xml:            \"xml\", \r\n        csv:            \"csv\", \r\n        javascript:     \"javascript\", \r\n        json:           \"json\",\r\n        object:         \"json\",\r\n        \"function\":     \"json\", \r\n        dps:            \"dps\",\r\n        dataset:        \"json\",\r\n    }\r\n\r\n    var extention = {\r\n        help:           \"json\",\r\n        html:           \"html\", \r\n        json:           \"json\", \r\n        table:          \"json\",\r\n        error:          \"json\",\r\n        bar:            \"json\",\r\n        hbar:           \"json\",\r\n        line:           \"json\",\r\n        area:           \"json\",\r\n        scatter:        \"json\",\r\n        radar:          \"json\",\r\n        deps:           \"json\",\r\n        pie:            \"json\"    \r\n    }\r\n\r\n    \r\n    new APIProvider($scope)\r\n        .config(() => {\r\n            console.log(`widget ${$scope.widget.instanceName} is (re)configuring...`);\r\n        })\r\n        .provide('setData', (e, context) => {\r\n            if (!context) {\r\n                $scope.hidden = true;\r\n                return\r\n            }\r\n            \r\n            var mode = supportedMode[context.key];\r\n            \r\n            if($scope.widget.extention){\r\n                mode = mode || extention[context.key]\r\n            }\r\n\r\n            if(mode){\r\n                $scope.hidden = false;\r\n                $scope.settings = {\r\n                    options:{\r\n                        mode: mode,\r\n                        theme: \"tomorrow\"\r\n                    },\r\n                    type: context.key,\r\n                    data: prettify(context)\r\n                }\r\n            }else{\r\n                $scope.hidden = true;\r\n            }\r\n    \r\n        })\r\n        .removal(() => {\r\n            console.log('Result Script widget is destroyed');\r\n        });\r\n})\r\n"],"sourceRoot":"/source/"}
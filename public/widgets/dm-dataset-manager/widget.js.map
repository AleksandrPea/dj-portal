{"version":3,"sources":["dm-dataset-manager/widget.js"],"names":[],"mappings":"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","file":"dm-dataset-manager/widget.js","sourcesContent":["import angular from 'angular';\r\nimport 'dictionary';\r\n\r\n\r\nangular.module('app.widgets.dm-dataset-manager', ['app.dictionary', 'ngFileUpload', \"app.dps\", 'mm.foundation'])\r\n    // .controller('DatasetManagerSearchResultController', function ($scope, $http, EventEmitter, \r\n    //   APIProvider, pageSubscriptions, $lookup, $translate,$modal, user) {\r\n\r\n\r\n//   const eventEmitter = new EventEmitter($scope);\r\n//   $scope.lookup = $lookup;\r\n//   $scope.breadcrums = [];\r\n//   $scope.tagList = [];\r\n//   $scope.user = user;\r\n//   $scope.total = 0;\r\n//   $scope.table = undefined;\r\n\r\n//   var formatDate = function(date){\r\n//     var locale = $translate.use() || \"en\";\r\n//     date = new Date(date);\r\n//     date = date.toLocaleString(locale,\r\n//       { year: 'numeric',  \r\n//         month: 'long',  \r\n//         day: 'numeric', \r\n//         hour: 'numeric',  \r\n//         minute: 'numeric',\r\n//         second: 'numeric'\r\n//       })\r\n//     return date;\r\n//   }\r\n\r\n//    $scope.formatDate = formatDate;\r\n\r\n//   function addListener(subscription) {\r\n//     var subscriptions = pageSubscriptions();\r\n//     for (var i in subscriptions) {\r\n//       if (subscriptions[i].emitter === subscription.emitter \r\n//         && subscriptions[i].receiver === subscription.receiver) {\r\n//         return;\r\n//       }\r\n//     }\r\n//     subscriptions.push(subscription);\r\n//   };\r\n\r\n//   function removeListener(subscription) {\r\n//     var subscriptions = pageSubscriptions();\r\n//     for (var i in subscriptions) {\r\n//       if (subscriptions[i].emitter === subscription.emitter \r\n//         && subscriptions[i].receiver === subscription.receiver) {\r\n//         subscriptions.splice(i, 1);\r\n//         return;\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   var searchDatasets = function(query){\r\n//         if(query){\r\n//           $scope.total = 0;\r\n//           $scope.query = query;\r\n//           var status = (user.isOwner || user.isCollaborator) ? \"private\" : \"public\";\r\n//           $http.post(\"./api/metadata/items\", {\"query\":query, \"status\":status}).success(\r\n//             function(resp){\r\n//               $scope.result = resp;\r\n//               $scope.total = $scope.result.length;\r\n//               if($scope.total == 0){\r\n//                  eventEmitter.emit(\"slaveVisibility\",true);\r\n//                }else{\r\n//                  eventEmitter.emit(\"slaveVisibility\",false);\r\n//                }\r\n//           });\r\n//         }\r\n//   }\r\n\r\n//   $scope.download = function(item){\r\n//     item.download = true;\r\n//     $http.get(\"./api/dataset/download/\"+item.dataset.id)\r\n//       .success(function(){\r\n//         item.download = false;\r\n//       })\r\n//   }\r\n\r\n//   $scope.selectSource = function(key){\r\n//     eventEmitter.emit('setLookupKey', key);\r\n//     let query = [{\"dataset.source\":[{equals:key}]}];\r\n//     searchDatasets(query);\r\n//   }\r\n\r\n//   $scope.selectTopic = function(key){\r\n//     eventEmitter.emit('setLookupKey', key);\r\n//     let query = [{\"dataset.topics\":[{includes:key}]}];\r\n//     searchDatasets(query);\r\n//   }\r\n\r\n//   $scope.lookup = $lookup;\r\n\r\n\r\n//   var prepareTopics = function(topics){\r\n//     var simple_topics = [];\r\n//     topics = (topics.forEach) ? topics : [topics];\r\n//     topics.forEach(function(item){\r\n//       item.split(\"/\").forEach(function(t){\r\n//         if(simple_topics.filter(function(s){return s === t}).length === 0){simple_topics.push(t)}\r\n//       });\r\n//     })\r\n//     return simple_topics;\r\n//   }\r\n\r\n//   $scope.prepareTopics = prepareTopics;\r\n\r\n\r\n//   $scope.openQueryDialog = function(item){\r\n//     $modal.open({\r\n//       templateUrl: \"./widgets/dm-search-result/query-modal.html\",\r\n//       controller: 'QueryDialogController',\r\n//       backdrop: 'static',\r\n//       resolve: {\r\n//         item() {return item },\r\n//         prepareTopics() {return prepareTopics},\r\n//         table() {return $scope.table},\r\n//         formatDate() { return formatDate}\r\n//       }  \r\n//     }).result.then(\r\n//       () => {\r\n//         // console.log(\"Close Query DIALOG\")\r\n//         if(item.tableID){\r\n//           $http.get(\"./api/table/delete/\"+item.tableID)\r\n//             .success(function(){\r\n//               item.tableID = undefined;\r\n//             });\r\n//         }\r\n//       },\r\n//       () => {\r\n//         // console.log(\"Cancel Query DIALOG\",resp)\r\n//         // console.log(item.tableID)\r\n//         if(item.tableID){\r\n\r\n//           $http.get(\"./api/table/delete/\"+item.tableID)\r\n//             .success(function(){\r\n//               item.tableID = undefined;\r\n//             });\r\n//         }\r\n//       }\r\n//     );\r\n//   }\r\n\r\n\r\n//    $scope.openManageDialog = function(item){\r\n//     $modal.open({\r\n//       templateUrl: \"./widgets/dm-search-result/manage-modal.html\",\r\n//       controller: 'ManageDialogController',\r\n//       backdrop: 'static',\r\n//       resolve: {\r\n//         item() {return item },\r\n//         prepareTopics() {return prepareTopics},\r\n//         formatDate() { return formatDate}\r\n//       }  \r\n//     }).result.then(\r\n//           () => {\r\n//              // console.log(\"Close MANAGE DIALOG\",item);\r\n//              eventEmitter.emit('refresh');\r\n//           },\r\n//           () => {\r\n//              // console.log(\"Cancel MANAGE DIALOG\",item);\r\n//              eventEmitter.emit('refresh');\r\n//           }\r\n//     );\r\n//   }\r\n\r\n\r\n//   new APIProvider($scope)\r\n//     .config(() => {\r\n//       console.log(`widget ${$scope.widget.instanceName} is (re)configuring...`);\r\n//       $scope.title = $scope.widget.title;\r\n//       $scope.icon_class = $scope.widget.icon_class;\r\n//       // $scope.query = $scope.widget.query || $scope.query;\r\n//       searchDatasets($scope.query);\r\n\r\n//       $scope.listeners = ($scope.widget.listeners) ? $scope.widget.listeners.split(\",\") : [];\r\n//       for(var i in $scope.listeners){\r\n//         $scope.listeners[i] = $scope.listeners[i].trim();\r\n//         // console.log($scope.widget.instanceName,$scope.listeners[i]);\r\n//         addListener({\r\n//               emitter: $scope.widget.instanceName,\r\n//               receiver: $scope.listeners[i],\r\n//               signal: \"setLookupKey\",\r\n//               slot: \"setLookupKey\"\r\n//             });\r\n//       }\r\n\r\n//       $scope.rlisteners = ($scope.widget.rlisteners) ? $scope.widget.rlisteners.split(\",\") : [];\r\n//       for(var i in $scope.rlisteners){\r\n//         $scope.rlisteners[i] = $scope.rlisteners[i].trim();\r\n//         // console.log($scope.widget.instanceName,$scope.rlisteners[i]);\r\n//         addListener({\r\n//               emitter: $scope.widget.instanceName,\r\n//               receiver: $scope.rlisteners[i],\r\n//               signal: \"refresh\",\r\n//               slot: \"refresh\"\r\n//             });\r\n//       }          \r\n\r\n//     })\r\n//     .provide('searchQuery', (evt, value) => {\r\n//       $scope.query = value;\r\n//       // console.log(\"SEARCH\",evt, $scope.query)\r\n//       searchDatasets(value);\r\n//     })\r\n//     .provide('refresh', (evt) => {\r\n//       // console.log(\"REFRESH\", $scope.query);\r\n//       searchDatasets($scope.query);\r\n//     })\r\n\r\n//     .removal(() => {\r\n//       console.log('Find Result widget is destroyed');\r\n//     });\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.controller(\"DatasetsManagerController\", function($scope, $http, $upload, $timeout, $dps,\r\n    $lookup, EventEmitter, APIProvider, pageSubscriptions,\r\n    $translate, user, confirm, alert, dialog, log, progress) {\r\n\r\n    const eventEmitter = new EventEmitter($scope);\r\n\r\n    var formatDate = function(date) {\r\n        var locale = $translate.use() || \"en\";\r\n        date = new Date(date);\r\n        date = date.toLocaleString(locale, {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric'\r\n        })\r\n        return date;\r\n    }\r\n\r\n\r\n    $scope.formatDate = formatDate;\r\n\r\n    $scope.item = undefined;\r\n    $scope.lookup = $lookup;\r\n    $scope.user = user;\r\n    $scope.upload_process = false;\r\n    $scope.dps = $dps.getUrl();\r\n\r\n\r\n\r\n    var prepareTopics = function(topics) {\r\n        var simple_topics = [];\r\n        topics = (topics.forEach) ? topics : [topics];\r\n        topics.forEach(function(item) {\r\n            item.split(\"/\").forEach(function(t) {\r\n                if (simple_topics.filter(function(s) {\r\n                        return s === t }).length === 0) { simple_topics.push(t) }\r\n            });\r\n        })\r\n        return simple_topics;\r\n    }\r\n\r\n    $scope.prepareTopics = prepareTopics;\r\n\r\n    function addListener(subscription) {\r\n        var subscriptions = pageSubscriptions();\r\n        for (var i in subscriptions) {\r\n            if (subscriptions[i].emitter === subscription.emitter && subscriptions[i].receiver === subscription.receiver) {\r\n                return;\r\n            }\r\n        }\r\n        subscriptions.push(subscription);\r\n    };\r\n\r\n    function removeListener(subscription) {\r\n        var subscriptions = pageSubscriptions();\r\n        for (var i in subscriptions) {\r\n            if (subscriptions[i].emitter === subscription.emitter && subscriptions[i].receiver === subscription.receiver) {\r\n                subscriptions.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    $scope.fileSelected = function(f, e) {\r\n        var files = f;\r\n\r\n        $scope.formUpload = false;\r\n        if (files != null) {\r\n            $scope.commits = undefined;\r\n            for (var i = 0; i < files.length; i++) {\r\n                $scope.errorMsg = null;\r\n                (function(file) {\r\n                    $scope.upload(file);\r\n                })(files[i]);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    $scope.uploadCommit = function() {\r\n        dialog({\r\n            title: `${$translate.instant('Select .xlsx file')}:`,\r\n            fields: {\r\n                file: {\r\n                    title: 'Data file:',\r\n                    type: 'file',\r\n                    editable: true,\r\n                    required: true\r\n                }\r\n            }\r\n        }).then((form) => {\r\n            var p = progress(\"Upload dataset \");\r\n            const fd = new FormData();\r\n            // Take the first selected file\r\n            fd.append('file', form.fields.file.value);\r\n            \r\n            $http.post($dps.getUrl() + '/api/dataset/update', fd, {\r\n                withCredentials: true,\r\n                headers: { 'Content-Type': undefined },\r\n                transformRequest: angular.identity\r\n            }).success(function(response) {\r\n                p.close();\r\n                var title = { level: \"success\", text: \"Dataset Created\" };\r\n\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"error\" }).length > 0)\r\n                    title = { level: \"error\", text: \"Cannot create Dataset\" };\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"warning\" }).length > 0)\r\n                    title = { level: \"warning\", text: \"Dataset Created with Warnings\" };\r\n\r\n                log({ title: title, messages: response.log });\r\n\r\n                $scope.upload_process = false;\r\n                $lookup.reload();\r\n                $scope.item = response.metadata;\r\n                $timeout(function() {\r\n                    $scope.getCommitList();\r\n                    eventEmitter.emit('refresh');\r\n                });\r\n            });\r\n        })\r\n    }\r\n\r\n    $scope.uploadfromFTP = function() {\r\n        dialog({\r\n            title: `${$translate.instant('Select .xlsx file')}:`,\r\n            fields: {\r\n                file: {\r\n                    title: 'Data file:',\r\n                    type: 'file',\r\n                    editable: true,\r\n                    required: true\r\n                }\r\n            }\r\n        }).then((form) => {\r\n            var p = progress(\"Upload CSV \");\r\n            const fd = new FormData();\r\n            // Take the first selected file\r\n            fd.append('file', form.fields.file.value);\r\n            $http.post($dps.getUrl() + '/api/dataset/ch/update', fd, {\r\n                withCredentials: true,\r\n                headers: { 'Content-Type': undefined },\r\n                transformRequest: angular.identity\r\n            }).success(function(response) {\r\n                p.close();\r\n                var title = { level: \"success\", text: \"Dataset Group Created\" };\r\n\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"error\" }).length > 0)\r\n                    title = { level: \"error\", text: \"Cannot create Dataset Group\" };\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"warning\" }).length > 0)\r\n                    title = { level: \"warning\", text: \"Dataset Group Created with Warnings\" };\r\n\r\n                log({ title: title, messages: response.log });\r\n\r\n                $scope.upload_process = false;\r\n                $lookup.reload();\r\n                // $scope.item = response.metadata;\r\n                // $timeout(function() {\r\n                //   $scope.getCommitList();\r\n                //   eventEmitter.emit('refresh');\r\n                // });\r\n            });\r\n        })\r\n    }\r\n\r\n    $scope.getDatasetUUID = function(){\r\n        var p = progress(\"Create new dataset UUID\")\r\n         $dps\r\n            .get(\"/api/dataset/id/create\")\r\n            .then((response) => {\r\n                p.close();\r\n                confirm(response.data.id)\r\n            })\r\n    }\r\n\r\n    $scope.exportDictionary = function(){\r\n        var p = progress(\"Download Dictionaries\")\r\n        $dps\r\n            .get(\"/api/export/dictionary\")\r\n            .then((response) => {\r\n                p.close();\r\n                $dps.downloadJSON(response.data,response.data.data.file)\r\n            })    \r\n    }\r\n\r\n    $scope.exportDatasets = function() {\r\n        var p = progress(\"Wait one moment\")\r\n        $dps\r\n            .get(\"/api/export/datasets/metadata\")\r\n            .then((response) => {\r\n                p.close();\r\n                dialog({\r\n                    title:\"Select datasets for export\",\r\n                    fields: {\r\n                        list:{\r\n                            title:\"Dataset list\",\r\n                            type:\"multiselect\",\r\n                            options:response.data.data.list.map((item)=>{\r\n                                return {\r\n                                    value:item.id,\r\n                                    title: $translate.instant(item.label)+item.ext\r\n                                }    \r\n                            }),\r\n                            editable: true,\r\n                            required: true\r\n                        }\r\n                    }\r\n                })\r\n                .then( (form) => {\r\n                    p = progress(\"Download data\")\r\n\r\n                    $dps\r\n                    .get(\"/api/export/datasets/\"+form.fields.list.value.join(\"+\"))\r\n                    .then((response) => {\r\n                        p.close()\r\n                        $dps.downloadJSON(response.data,response.data.data.file)\r\n                        log({ messages: response.data.log })\r\n                    })\r\n                })        \r\n        })\r\n    }\r\n\r\n    $scope.importDatasets = function() {\r\n        dialog({\r\n            title: `${$translate.instant('Select .json file with datasets')}:`,\r\n            fields: {\r\n                file: {\r\n                    title: 'Data file:',\r\n                    type: 'file',\r\n                    editable: true,\r\n                    required: true\r\n                }\r\n            }\r\n        }).then((form) => {\r\n            var p = progress(\"Import datasets \");\r\n            const fd = new FormData();\r\n            // Take the first selected file\r\n            fd.append('file', form.fields.file.value);\r\n            $http.post($dps.getUrl() + '/api/import/datasets', fd, {\r\n                withCredentials: true,\r\n                headers: { 'Content-Type': undefined },\r\n                transformRequest: angular.identity\r\n            }).success(function(response) {\r\n                p.close()\r\n                var title = { level: \"success\", text: \"Datasets imported\" };\r\n\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"error\" }).length > 0)\r\n                    title = { level: \"error\", text: \"Cannot import datasets\" };\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"warning\" }).length > 0)\r\n                    title = { level: \"warning\", text: \"Datasets imported with Warnings\" };\r\n\r\n                log({ title: title, messages: response.log });\r\n\r\n                $scope.upload_process = false;\r\n                $lookup.reload();\r\n                // $scope.item = response.metadata;\r\n                // $timeout(function() {\r\n                //   $scope.getCommitList();\r\n                //   eventEmitter.emit('refresh');\r\n                // });\r\n            });\r\n        })\r\n    }\r\n\r\n     $scope.importDictionary = function() {\r\n        dialog({\r\n            title: `${$translate.instant('Select .json file with dictionary')}:`,\r\n            fields: {\r\n                file: {\r\n                    title: 'Data file:',\r\n                    type: 'file',\r\n                    editable: true,\r\n                    required: true\r\n                }\r\n            }\r\n        }).then((form) => {\r\n            var p = progress(\"Import dictionaries \");\r\n            const fd = new FormData();\r\n            // Take the first selected file\r\n            fd.append('file', form.fields.file.value);\r\n            $http.post($dps.getUrl() + '/api/import/dictionary', fd, {\r\n                withCredentials: true,\r\n                headers: { 'Content-Type': undefined },\r\n                transformRequest: angular.identity\r\n            }).success(function(response) {\r\n                p.close()\r\n                var title = { level: \"success\", text: \"Dictionary imported\" };\r\n\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"error\" }).length > 0)\r\n                    title = { level: \"error\", text: \"Cannot import dictionary\" };\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"warning\" }).length > 0)\r\n                    title = { level: \"warning\", text: \"Dictionary imported with Warnings\" };\r\n\r\n                log({ title: title, messages: response.log });\r\n\r\n                $scope.upload_process = false;\r\n                $lookup.reload();\r\n                // $scope.item = response.metadata;\r\n                // $timeout(function() {\r\n                //   $scope.getCommitList();\r\n                //   eventEmitter.emit('refresh');\r\n                // });\r\n            });\r\n        })\r\n    }\r\n\r\n    $scope.uploadDictionary = function() {\r\n        dialog({\r\n            title: `${$translate.instant('Select .xlsx file')}:`,\r\n            fields: {\r\n                file: {\r\n                    title: 'Data file:',\r\n                    type: 'file',\r\n                    editable: true,\r\n                    required: true\r\n                }\r\n            }\r\n        }).then((form) => {\r\n            var p = progress(\"Update dictionaries \");\r\n            const fd = new FormData();\r\n            // Take the first selected file\r\n            fd.append('file', form.fields.file.value);\r\n            $http.post($dps.getUrl() + '/api/dictionary/update', fd, {\r\n                withCredentials: true,\r\n                headers: { 'Content-Type': undefined },\r\n                transformRequest: angular.identity\r\n            }).success(function(response) {\r\n                p.close()\r\n                var title = { level: \"success\", text: \"Dictionaries updated\" };\r\n\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"error\" }).length > 0)\r\n                    title = { level: \"error\", text: \"Cannot update dictionary\" };\r\n                if (response.log.filter((item) => {\r\n                        return item.level == \"warning\" }).length > 0)\r\n                    title = { level: \"warning\", text: \"Dictionary updated with Warnings\" };\r\n\r\n                log({ title: title, messages: response.log });\r\n\r\n                $scope.upload_process = false;\r\n                $lookup.reload();\r\n                // $scope.item = response.metadata;\r\n                // $timeout(function() {\r\n                //   $scope.getCommitList();\r\n                //   eventEmitter.emit('refresh');\r\n                // });\r\n            });\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    // $scope.upload = function (file) {\r\n    //   $scope.upload_process = true;\r\n    //   $upload.upload({\r\n    //     url: $dps.getUrl()+'/api/dataset/update',\r\n    //     method: 'POST',\r\n    //     headers: {\r\n    //       //'my-header' : 'my-header-value'\r\n    //     },\r\n    //     file: file,\r\n    //   })\r\n    //   .then(function(response) {\r\n    //     if(response.data.error){\r\n    //        alert.error([\"Dataset Commit not created\"].concat(response.data.error));\r\n    //        $scope.getCommitList();\r\n    //     }else{\r\n    //       if(response.data.warnings.length>0){\r\n    //        alert.message([\"Dataset commit is created, but\"].concat(response.data.warnings));\r\n    //       }\r\n\r\n    //       $scope.upload_process = false;\r\n    //       $lookup.reload();\r\n    //       $scope.item = response.data.metadata;\r\n    //       $timeout(function() {\r\n    //         $scope.getCommitList();\r\n    //         eventEmitter.emit('refresh');\r\n    //       });\r\n    //     }  \r\n    //   });\r\n    // }\r\n\r\n\r\n    $scope.headStyle = function(f) {\r\n        return (f) ? { \"font-weight\": 900, \"color\": \"darkorange\" } : {}\r\n    }\r\n\r\n    $scope.headRowStyle = function(f) {\r\n        return (f) ? {\r\n            \"background-color\": \"rgba(160, 211, 232, 0.31)\",\r\n            \"font-size\": \"smaller\",\r\n            \"font-weight\": \"bold\",\r\n            \"padding\": \"0.1rem 0.5rem\"\r\n        } : {\r\n            \"font-size\": \"smaller\",\r\n            \"color\": \"orangered\",\r\n            \"padding\": \"0.1rem 0.5rem\"\r\n        }\r\n    }\r\n\r\n    $scope.upToHEAD = function(c) {\r\n        $scope.commits = undefined;\r\n        //$http.get(\"./api/commit/head/\"+c.metadata.dataset.commit.id)\r\n        $dps.get(\"/api/commit/head/\" + c.metadata.dataset.commit.id)\r\n            .success(function(resp) {\r\n                $scope.item = resp.metadata;\r\n                $scope.getCommitList();\r\n            })\r\n\r\n    }\r\n\r\n    $scope.setCommitStatus = function(commitID, status) {\r\n        // $http.get(\"./api/commit/\"+status+\"/\"+commitID)\r\n        $dps.get(\"/api/commit/\" + status + \"/\" + commitID)\r\n            .success(function(resp) {\r\n                $scope.item = resp.metadata;\r\n                $scope.getCommitList();\r\n                eventEmitter.emit('refresh');\r\n            })\r\n    }\r\n\r\n    $scope.deleteCommit = function(c) {\r\n        $scope.commits = undefined;\r\n        // $http.get(\"./api/commit/delete/\"+c.metadata.dataset.commit.id)\r\n        $dps.get(\"/api/commit/delete/\" + c.metadata.dataset.commit.id)\r\n            .success(function() {\r\n                $scope.getCommitList();\r\n                eventEmitter.emit('refresh');\r\n            })\r\n    }\r\n\r\n    $scope.deleteDataset = function(c) {\r\n        confirm(\"You will remove the dataset \" + c.metadata.dataset.id + \". You can download it before removing. Are you sure?\")\r\n            .then(function() {\r\n                $scope.item = undefined;\r\n                $scope.deleteCommit(c);\r\n            })\r\n    }\r\n\r\n    $scope.selectDataset = function(d) {\r\n        $scope.item = d;\r\n        $scope.getCommitList();\r\n    }\r\n\r\n    $scope.showDatasetList = function() {\r\n        $scope.item = undefined;\r\n        $scope.getCommitList();\r\n    }\r\n\r\n    $scope.getAllDatasets = function() {\r\n        // $http.post(\"./api/metadata/items\",{status:\"private\"})\r\n        $dps.post(\"/api/metadata/items\", { status: \"private\" })\r\n            .success(function(resp) {\r\n                $scope.datasets = resp;\r\n            })\r\n    }\r\n\r\n    $scope.getCommitList = function() {\r\n        if ($scope.item) {\r\n            // $http.get(\"./api/dataset/commits/\"+$scope.item.dataset.id)\r\n            $dps.get(\"/api/dataset/commits/\" + $scope.item.dataset.id)\r\n                .success(function(data) {\r\n                    $scope.commits = data;\r\n                })\r\n        } else {\r\n            $scope.getAllDatasets();\r\n        }\r\n    };\r\n\r\n    new APIProvider($scope)\r\n        .config(() => {\r\n            console.log(`widget ${$scope.widget.instanceName} is (re)configuring...`);\r\n            $scope.readOnly = $scope.widget.readOnly;\r\n            $scope.presentationMode = $scope.widget.presentationMode;\r\n            $scope.collapsed = true;\r\n            $scope.rlisteners = ($scope.widget.rlisteners) ? $scope.widget.rlisteners.split(\",\") : [];\r\n\r\n            pageSubscriptions().removeListeners({\r\n                emitter: $scope.widget.instanceName,\r\n                signal: \"refresh\"\r\n            })\r\n\r\n            pageSubscriptions().addListeners(\r\n                $scope.rlisteners.map((item) => {\r\n                    return {\r\n                        emitter: $scope.widget.instanceName,\r\n                        receiver: item.trim(),\r\n                        signal: \"refresh\",\r\n                        slot: \"refresh\"\r\n                    }\r\n                })\r\n            );\r\n\r\n            // for(var i in $scope.rlisteners){\r\n            //   $scope.rlisteners[i] = $scope.rlisteners[i].trim();\r\n            //   addListener({\r\n            //         emitter: $scope.widget.instanceName,\r\n            //         receiver: $scope.rlisteners[i],\r\n            //         signal: \"refresh\",\r\n            //         slot: \"refresh\"\r\n            //       });\r\n            // }        \r\n            $scope.getCommitList();\r\n\r\n        });\r\n})\r\n\r\n\r\n// .controller(\"QueryDialogController\", function ($scope, $modalInstance,$http, \r\n//                                                 item, prepareTopics, table, formatDate, \r\n//                                                 $lookup, $translate){\r\n\r\n//   $scope.lookup = $lookup;\r\n//   $scope.prepareTopics = prepareTopics;\r\n//   $scope.item = item;\r\n//   $scope.floor = Math.floor;\r\n//   $scope.formatDate = formatDate;\r\n//   $scope.table = table;\r\n\r\n//   $scope.getItemStyle = function(obj){\r\n//     if(obj.selected){\r\n//       return {\r\n//         \"color\":\"#FFFFFF\",\r\n//         \"background-color\":\"#008CBA\"\r\n//       }\r\n//     }else{\r\n//       return {\r\n//         \"color\":\"#008CBA\",\r\n//         \"background-color\":\"#FFFFFF\"\r\n//       }\r\n//     }\r\n//   } \r\n\r\n//   var genSelectionString = function(dim){\r\n//     let buf = [];\r\n//     // let s = \"\";\r\n//     dim.selectionString = \"\";\r\n\r\n//     dim.values.forEach(function(item){\r\n//       if(item.selected){\r\n//         buf.push(item)\r\n//       }\r\n//     })\r\n//     if(buf.length === 0){\r\n//       dim.selectionString = \"\";\r\n//     }\r\n\r\n//     for(let i in buf){\r\n//       let k = ($lookup(buf[i].label).label)?$lookup(buf[i].label).label:buf[i].label;\r\n//       $translate(k).then(function(translation){\r\n//         dim.selectionString+=translation+\", \";\r\n//         if(dim.selectionString.length >=45){\r\n//           dim.selectionString = dim.selectionString.substring(0,40)+\"... (\"+buf.length+\" items) \"\r\n//         }\r\n//       })\r\n//     }\r\n// }\r\n\r\n//   $scope.tryGetTable = function(){\r\n//     // console.log($scope.item);\r\n//     $scope.requestComplete = $scope.testQuery($scope.item); \r\n//     if($scope.requestComplete){\r\n//      $scope.request = $scope.makeRequest($scope.item);\r\n\r\n//      if($scope.table){\r\n//         $http.get(\"./api/table/delete/\"+$scope.table.id)\r\n//           .success(function(){\r\n//             $scope.table = undefined; \r\n//             item.tableID = undefined; \r\n//             $http.post(\"./api/dataset/query\",$scope.request)\r\n//               .success(function(resp){\r\n//               $scope.table = resp;\r\n//               item.tableID = resp.id;\r\n//             })\r\n//           }) \r\n//      }else{\r\n//         $scope.table = undefined;\r\n//         item.tableID = undefined;\r\n//         $http.post(\"./api/dataset/query\",$scope.request)\r\n//           .success(function(resp){\r\n//           $scope.table = resp;\r\n//           item.tableID = resp.id;\r\n//         })\r\n//      }\r\n\r\n//     }else{\r\n//       if($scope.table){\r\n//         $http.get(\"./api/table/delete/\"+$scope.table.id)\r\n//           .success(function(){\r\n//             $scope.table = undefined;\r\n//             item.tableID = undefined;\r\n//         });\r\n//       }      \r\n//     }\r\n//   };\r\n\r\n\r\n//   $scope.range = function(min,max){\r\n//       var result = [];\r\n//       for(var i=min; i<=max; i++) result.push(i)\r\n\r\n//       return result;  \r\n//   };\r\n\r\n//   $scope. getValue = function(value){\r\n//       return (value == null) ? \"-\" : value;\r\n//   };\r\n\r\n//   $scope.select= function(dim,item){\r\n//     item.selected = item.selected || false;\r\n//     item.selected = !item.selected;\r\n//     genSelectionString(dim);\r\n//     $scope.tryGetTable();\r\n//   }\r\n\r\n//   $scope.selectAll= function(dim){\r\n//     dim.values.forEach(function(item){\r\n//       item.selected = true;\r\n//     })\r\n//     genSelectionString(dim);\r\n//     $scope.tryGetTable();\r\n//   }\r\n\r\n//   $scope.clear= function(dim){\r\n//     dim.values.forEach(function(item){\r\n//       item.selected = false;\r\n//     })\r\n//     genSelectionString(dim);\r\n//     $scope.tryGetTable();\r\n//   }\r\n\r\n//   $scope.reverse= function(dim){\r\n//     dim.values.forEach(function(item){\r\n//       item.selected = !item.selected;\r\n//     })\r\n//     genSelectionString(dim);\r\n//     $scope.tryGetTable();\r\n//   }\r\n\r\n//   $scope.setRole = function(dim,role){\r\n//     dim.role = role;\r\n//     $scope.tryGetTable();   \r\n//   }\r\n\r\n\r\n//   $scope.makeRequest = function(item){\r\n//     let req = {};\r\n//     req.commitID = item.dataset.commit.id;\r\n//     req.query = [];\r\n//     req.locale = $translate.use();\r\n//     for(let i in item.dimension){\r\n//       let d = item.dimension[i];\r\n//       let collection = getSelectedItems(d);\r\n//       if (collection.length == d.values.length){\r\n//         collection = [];\r\n//       }else{\r\n//         collection = collection.map(function(item){\r\n//           return item.id;\r\n//         })\r\n//       }\r\n//       req.query.push(\r\n//           {\r\n//             \"dimension\" : i,\r\n//             \"role\" : d.role,\r\n//             \"collection\" : collection \r\n//           }\r\n//       )\r\n//     }\r\n//     return req   \r\n//   };\r\n\r\n//     var getSelectedItems = function(d){\r\n//         let buf = [];\r\n//         d.values.forEach(function(item){\r\n//           if(item.selected){\r\n//             buf.push(item)\r\n//           }\r\n//         })\r\n//         return buf;\r\n//     }\r\n\r\n//     $scope.testQuery = function(item){\r\n//       let columnsAvailable = false;\r\n//       let rowsAvailable = false;\r\n//       let splitColumnsAvailable = true;\r\n//       let splitRowsAvailable = true;\r\n//       for(let i in item.dimension){\r\n//         let d = item.dimension[i];\r\n//         if(d.role == \"Columns\" && getSelectedItems(d).length>0) columnsAvailable = true;\r\n//         if(d.role == \"Rows\" && getSelectedItems(d).length>0) rowsAvailable = true;\r\n//         if(d.role == \"Split Columns\"){\r\n//           if(getSelectedItems(d).length>0){\r\n//             splitColumnsAvailable &= true;\r\n//           }else{\r\n//             splitColumnsAvailable &= false;\r\n//           }\r\n//         }  \r\n//         if(d.role == \"Split Rows\"){\r\n//           if (getSelectedItems(d).length>0){ \r\n//             splitRowsAvailable &= true;\r\n//           }else{\r\n//             splitRowsAvailable &= false;\r\n//           }\r\n//         }\r\n//       }\r\n//       return columnsAvailable && rowsAvailable && splitColumnsAvailable && splitRowsAvailable;\r\n//     };\r\n\r\n\r\n\r\n//   $scope.tryGetTable();   \r\n\r\n\r\n//   $scope.close = function(){\r\n//     // console.log(\"Close\", $scope.table);\r\n//     if($scope.table){\r\n//         $http.get(\"./api/table/delete/\"+$scope.table.id)\r\n//           .success(function(){\r\n//             $scope.table = undefined;\r\n//             item.tableID = undefined;\r\n//           });\r\n//     }        \r\n//     $modalInstance.close();\r\n//   };\r\n\r\n//   $scope.cancel = function(){\r\n//     // console.log(\"Cancel\", $scope.table);\r\n//     if($scope.table){\r\n//           $http.get(\"./api/table/delete/\"+$scope.table.id)\r\n//             .success(function(){\r\n//               $scope.table = undefined;\r\n//               item.tableID = undefined;\r\n//             });\r\n//     }\r\n//      $modalInstance.dismiss();\r\n//   };\r\n// })\r\n\r\n// ;\r\n"],"sourceRoot":"/source/"}
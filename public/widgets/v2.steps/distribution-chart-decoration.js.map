{"version":3,"sources":["v2.steps/distribution-chart-decoration.js"],"names":[],"mappings":"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","file":"v2.steps/distribution-chart-decoration.js","sourcesContent":["import angular from 'angular';\r\nimport 'widgets/v2.nvd3-widget/nvd3-widget';\r\nimport \"widgets/v2.nvd3-distribution/adapter\";\r\nimport \"wizard-directives\";\r\n\r\n\r\nvar m = angular.module(\"app.widgets.v2.steps.distribution-chart-decoration\",[\r\n\t'app.widgets.v2.nvd3-widget',\r\n    'app.widgets.v2.distribution-chart-adapter',\r\n    \"wizard-directives\"]);\r\n\r\nm.factory(\"DistributionChartDecoration\",[\r\n\t\"$http\",\r\n\t\"$q\", \r\n\t\"parentHolder\",\r\n\t\"DistributionAdapter\", \r\n\tfunction(\r\n\t\t$http, \r\n\t\t$q, \r\n\t\tparentHolder, \r\n\t\tDistributionAdapter ){\r\n\t\t\r\n\t\tlet chartAdapter = DistributionAdapter;\r\n\r\n\t\treturn {\r\n\t\t\tid: \"DistributionChartDecoration\",\r\n\r\n\t\t\ttitle : \"Chart Decoration\",\r\n\t\t\t\r\n\t\t\tdescription : \"Setup chart decoration options\",\r\n\t        \r\n\t    \thtml : \"./widgets/v2.steps/distribution-chart-decoration.html\",\r\n\r\n\t    \tonStartWizard: function(wizard){\r\n\t    \t\tthis.wizard = wizard;\r\n\t    \t\tthis.conf = {\r\n\t    \t\t\tbeans: (wizard.conf.beans) ? wizard.conf.beans : 5,\r\n\t                cumulate: (wizard.conf.cumulate) ? wizard.conf.cumulate : false,\r\n\t    \t\t\tdecoration : wizard.conf.decoration,\r\n\t    \t\t\tserieRequest : wizard.conf.serieRequest,\r\n\t    \t\t\tqueryResultId : wizard.conf.queryResultId,\r\n\t    \t\t\tserieDataId : wizard.conf.serieDataId,\r\n\t    \t\t\toptionsUrl : \"./widgets/v2.nvd3-distribution/options.json\",\r\n\t    \t\t\tdataUrl : \"./api/data/process/\"\r\n\t    \t\t}\t\r\n\t    \t},\r\n\r\n\t    \tonFinishWizard:  function(wizard){\r\n\t    \t\tthis.conf.decoration.setColor = undefined;\r\n\t    \t\twizard.conf.decoration = this.conf.decoration;\r\n\t    \t\twizard.conf.serieRequest = this.conf.serieRequest;\r\n\t    \t\twizard.conf.serieDataId  = this.conf.serieDataId;\r\n\t    \t\twizard.conf.beans = this.conf.beans;\r\n\t            wizard.conf.cumulate = this.conf.cumulate;\r\n\r\n\t    \t\t// console.log(\"before step finish\",wizard.conf )\r\n\t    \t\tthis.settings = {options:angular.copy(this.options), data:[]};\r\n\t    \t\tthis.conf = {};\r\n\t    \t},\r\n\r\n\t    \tonCancelWizard: function(wizard){\r\n\t\t\t\tthis.settings = {options:angular.copy(this.options), data:[]};\r\n\t\t\t\tthis.conf = {};\r\n\t    \t},\r\n\r\n\t    \treversePalette: function(){\r\n\t\t\t\tif ( this.conf.decoration.color ){\r\n\t\t\t\t\tthis.conf.decoration.color = this.conf.decoration.color.reverse(); \r\n\t\t\t\t}\t\r\n\t\t\t},\r\n\r\n\t\t\tloadOptions : function(){\r\n\t\t\t\treturn $http.get(this.conf.optionsUrl)\r\n\t\t\t},\r\n\r\n\t\t\tloadSeries : function(){\r\n\t\t\t\tlet r = $http.post(this.conf.dataUrl,\r\n\t\t\t\t\t{\r\n\t\t                \"data_id\": this.conf.queryResultId,\r\n\t\t                \"params\": {\r\n\t\t                \t\"beans\": this.conf.beans,\r\n\t                  \t\t\"cumulate\": this.conf.cumulate,\r\n\t                  \t\t\"useColumnMetadata\":[true],\r\n\t                  \t\t\"useRowMetadata\":[true]\r\n\t                    },\r\n\t\t                \"proc_name\": \"distribution\",\r\n\t\t                \"response_type\": \"data\"\r\n\t\t            }\r\n\t\t\t\t)\r\n\t\t\t\treturn r\r\n\t\t\t},\r\n\r\n\t\t\t setupOptions: function(){\r\n\t\t\t\t  var serieAdapter = {\r\n\t\t            getX: \t\t(d)\t=> d.x,\r\n\t\t            getY: \t\t(d)\t=> d.y,\r\n\t\t            getLabel: \t(d)\t=> d.y,\r\n\t\t            label: \t\t(d)\t=> d.label\r\n\t\t          }\r\n\r\n\t\t          let $scope = this;\r\n\t\t          let params = {serieAdapter:serieAdapter}\r\n\r\n\r\n\t\t          \r\n\t\t          for (var i in params.serieAdapter) {\r\n                      $scope.options.chart[i] = params.serieAdapter[i];\r\n                   }\r\n\r\n                  chartAdapter.applyDecoration($scope.options,$scope.conf.decoration) \r\n                  // if($scope.widget.decoration){\r\n                  //   $scope.decorationAdapter.applyDecoration($scope.options,$scope.widget.decoration)\r\n                  // }else{\r\n                  //   $scope.widget.decoration = $scope.decorationAdapter.getDecoration($scope.options);\r\n                  // }\r\n                  \r\n                  if(angular.isDefined(params.serieAdapter)){\r\n                    if (params.serieAdapter.getX) {\r\n                      $scope.options.chart.x = params.serieAdapter.getX;\r\n                    }\r\n\r\n                    if (params.serieAdapter.getY) {\r\n                      $scope.options.chart.y = params.serieAdapter.getY;\r\n                    }\r\n\r\n                    $scope.options.chart.label = params.serieAdapter.getLabel;\r\n\r\n                    if ($scope.options.chart.scatter) {\r\n                      $scope.options.chart.scatter.label = params.serieAdapter.getLabel;\r\n                    }\r\n                    \r\n                    if ($scope.options.chart.lines) {\r\n                      $scope.options.chart.lines.label = params.serieAdapter.getLabel;\r\n                    }\r\n                    \r\n                    if (  $scope.options.chart.stacked \r\n                          && angular.isObject($scope.options.chart.stacked)) {\r\n                      $scope.options.chart.stacked.label = params.serieAdapter.getLabel;\r\n                    }\r\n                  }  \r\n\t\t   \t\t  \r\n\t\t   \t\t  // for (var i in serieAdapter) {\r\n\t        //               this.options.chart[i] = serieAdapter[i];\r\n\t        //            }\r\n\t  \r\n\t                  \r\n\t        //           if(angular.isDefined(serieAdapter)){\r\n\t        //             if (serieAdapter.getX) {\r\n\t        //               this.options.chart.x = serieAdapter.getX;\r\n\t        //             }\r\n\r\n\t        //             if (serieAdapter.getY) {\r\n\t        //               this.options.chart.y = serieAdapter.getY;\r\n\t        //             }\r\n\r\n\t        //             this.options.chart.label = serieAdapter.getLabel;\r\n\r\n\t        //             if (this.options.chart.scatter) {\r\n\t        //               this.options.chart.scatter.label = serieAdapter.getLabel;\r\n\t        //             }\r\n\t        //             if (this.options.chart.lines) {\r\n\t        //               this.options.chart.lines.label = serieAdapter.getLabel;\r\n\t        //             }\r\n\t        //             if (this.options.chart.stacked && angular.isObject(this.options.chart.stacked)) {\r\n\r\n\t        //               this.options.chart.stacked.label = serieAdapter.getLabel;\r\n\t        //             }\r\n\t        //           }   \r\n\t\t\t   },\r\n\r\n\r\n\t\t\tactivate : function(wizard){\r\n\t\t\t\t\r\n\t\t\t\tthis.conf.queryResultId = wizard.context.queryResultId;\r\n\t\t\t\tthis.dataset = wizard.context.dataset;\r\n\t\t\t\tlet thos = this;\r\n\r\n\t\t\t\tif(!this.wizard.context.postprocessedTable){\r\n\t\t\t\t\t$http\r\n\t\t\t          .get(\"./api/data/process/\"+this.conf.queryResultId)\r\n\t\t\t          .success(function (resp) {\r\n\t\t\t              thos.wizard.context.postprocessedTable = resp.value;\r\n\t\t\t               // thos.axisXList = thos.makeAxisXList(thos.wizard.context.postprocessedTable);\r\n\t\t\t          })\r\n\t\t\t\t}else{\r\n\t\t\t\t\t // this.axisXList = this.makeAxisXList(this.wizard.context.postprocessedTable);\r\n\t\t\t   }\r\n\r\n\t\t\t\t\r\n\t\t\t\tthis.optionsLoaded = //(this.optionsLoaded) ? this.optionsLoaded :\r\n\t\t\t\t\tthis.loadOptions().then( (options) => {\r\n\t\t\t\t\t\tthos.options = options.data;\r\n\t                \tif(!thos.conf.decoration){\r\n\t\t\t            \tthos.conf.decoration = chartAdapter.getDecoration(thos.options);\r\n\t\t\t            }\r\n\t\t            \r\n\t\t\t            thos.conf.decoration.setColor = (palette) => {thos.conf.decoration.color = angular.copy(palette) }\r\n\t\t\t            thos.setupOptions();\r\n\r\n\t\t\t            // thos.options.chart.x = (d) => d.x;\r\n\t\t             //    thos.options.chart.y = (d) => d.y;\r\n\t\t             //    thos.options.chart.label = (d) => d.y;            \r\n\t\t             //    thos.options.chart.label = (d) => d.label;\r\n                        \r\n\t\t                thos.conf.decoration.width = parentHolder(thos.wizard.conf).width;\r\n\r\n\r\n\t\t    //             thos.conf.decoration.title = thos.dataset.dataset.label;\r\n\t\t\t\t\t\t// thos.conf.decoration.subtitle = thos.dataset.dataset.source;\r\n\t\t\t\t\t\t// thos.conf.decoration.caption = 'Note:'+ thos.dataset.dataset.note;\r\n\t\t\t\t\t\t// thos.conf.decoration.xAxisName = thos.dataset.dataset.label;\r\n\t\t\t\t\t\t// thos.conf.decoration.yAxisName = thos.dataset.dataset.label;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tthis.dataLoaded = //(this.dataLoaded) ? this.dataLoaded :\r\n\t\t\t\t \tthis.loadSeries().then( (resp) => {\r\n\t\t\t\t \t\tthos.data = resp.data.data;\r\n\t\t                thos.conf.serieDataId = resp.data.data_id;\r\n\r\n\t\t            });\r\n\r\n\t\t\t\t$q.all([this.optionsLoaded, this.dataLoaded]).then(() => {\r\n\t\t\t\t\t// thos.apply()\r\n\t\t\t\t\t// console.log(thos.options)\r\n\t\t\t\t\tthos.conf.decoration.width = parentHolder(thos.wizard.conf).width;\r\n\t\t\t\t\tchartAdapter.applyDecoration(thos.options,thos.conf.decoration);\r\n\t\t\t\t\tthos.settings = {options:angular.copy(thos.options), data:angular.copy(thos.data)};\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t},\r\n\r\n\t\t\tapply: function(){\r\n\t\t\t\tthis.activate(this.wizard)\r\n\t\t\t}\t\r\n\t    }\r\n}]);    \t\r\n\r\n\r\n\r\n// \r\n// \r\n// \r\n// \r\n// \r\n// \r\n\r\n// import angular from 'angular';\r\n// import \"widgets/v2.steps/palettes\";\r\n// import 'widgets/nvd3-widget/nvd3-widget';\r\n// import 'widgets/data-util/dps';\r\n// import \"widgets/v2.nvd3-distribution/adapter\";\r\n\r\n// var m = angular.module(\"app.widgets.v2.steps.distribution-chart-decoration\",[\r\n// \t\"app.widgets.palettes\",  \r\n// \t'app.widgets.nvd3-widget',\r\n//     \"app.widgets.data-util.dps\",\r\n//     \"app.widgets.v2.distribution-chart-adapter\"]);\r\n\r\n// m.factory(\"DistributionChartDecoration\",[\r\n// \t\"Palettes\", \"$http\",\"parentHolder\",\"Requestor\", \"DistributionAdapter\", \r\n// \tfunction(Palettes,$http, parentHolder, Requestor, DistributionAdapter ){\r\n// \treturn {\r\n\t\t\r\n// \t\ttitle : \"Chart Decoration\",\r\n\t\t\r\n// \t\tdescription : \"Setup chart decoration options\",\r\n        \r\n//     \thtml : \"./widgets/v2.steps/distribution-chart-decoration.html\",\r\n\r\n//     \tpalettes : Palettes,\r\n\r\n//     \tonStartWizard: function(wizard){\r\n//     \t\tthis.wizard = wizard;\r\n//     \t\tif(this.settings){\r\n//     \t\t\tthis.settings.options = undefined;\r\n//     \t\t\tthis.settings.data = undefined;\r\n//     \t\t}\r\n//     \t},\r\n\r\n//     \tonFinishWizard:  function(wizard){\r\n//     \t\twizard.conf.decoration = this.decoration;\r\n//     \t},\r\n\r\n//     \tsetColor : function(palette){\r\n//     \t\tthis.decoration.color = palette;\r\n//     \t\tif(this.decoration.reversePalette == true) this.reversePalette();\r\n//     \t},\r\n\t\t\r\n// \t\treversePalette: function(){\r\n// \t\t\tif ( this.decoration.color ){\r\n// \t\t\t\tvar tmp = [];\r\n// \t\t\t\tfor(var i = this.decoration.color.length-1; i >= 0; i--){\r\n// \t\t\t\t\ttmp.push(this.decoration.color[i]);\r\n// \t\t\t\t}\r\n\r\n// \t\t\t\tthis.decoration.color=[];\r\n// \t\t\t\tvar thos = this;\r\n// \t\t\t\ttmp.forEach(function(item){\r\n// \t\t\t\t\tthos.decoration.color.push(item);\r\n// \t\t\t\t})\r\n// \t\t\t}\t\r\n// \t\t},\r\n\r\n// \t\tmakeRequest: function(){\r\n// \t\t\tif(this.serieRequest){\r\n// \t\t\t\tthis.request = this.serieRequest;\r\n// \t\t\t\treturn;\t\r\n// \t\t\t}\r\n\r\n// \t\t\tthis.request = {\r\n// \t                \"data_id\": this.queryResultId,\r\n// \t                \"params\": \r\n// \t                {\r\n// \t                  \"mode\" : this.postprocessSettings.mode,\r\n// \t                  \"direction\" : this.postprocessSettings.direction,\r\n// \t                  \"precision\" : this.postprocessSettings.precision,\r\n// \t                  \"normalized\" : this.postprocessSettings.normalize,\r\n// \t                  \"useColumnMetadata\": this.postprocessSettings.useColumnMetadata,\r\n// \t                  \"useRowMetadata\": this.postprocessSettings.useRowMetadata,\r\n// \t                  \"beans\": this.postprocessSettings.beans,\r\n// \t                  \"cumulate\": this.postprocessSettings.cumulate\r\n\t                  \r\n\t                  \r\n// \t                },\r\n// \t                \"proc_name\": \"distribution\",\r\n// \t                \"response_type\": \"data\"\r\n// \t              };\r\n// \t        this.serieRequest = this.request;      \r\n// \t   },\r\n\r\n// \t   setupOptions: function(){\r\n// \t   \tvar serieAdapter = this.wizard.parentScope.serieAdapter;\r\n// \t   \t\t  for (var i in serieAdapter) {\r\n//                       this.options.chart[i] = serieAdapter[i];\r\n//                    }\r\n  \r\n                  \r\n//                   if(angular.isDefined(serieAdapter)){\r\n//                     if (serieAdapter.getX) {\r\n//                       this.options.chart.x = serieAdapter.getX;\r\n//                     }\r\n\r\n//                     if (serieAdapter.getY) {\r\n//                       this.options.chart.y = serieAdapter.getY;\r\n//                     }\r\n\r\n//                     this.options.chart.label = serieAdapter.getLabel;\r\n\r\n//                     if (this.options.chart.scatter) {\r\n//                       this.options.chart.scatter.label = serieAdapter.getLabel;\r\n//                     }\r\n//                     if (this.options.chart.lines) {\r\n//                       this.options.chart.lines.label = serieAdapter.getLabel;\r\n//                     }\r\n//                     if (this.options.chart.stacked && angular.isObject(this.options.chart.stacked)) {\r\n\r\n//                       this.options.chart.stacked.label = serieAdapter.getLabel;\r\n//                     }\r\n//                   }   \r\n// \t   },\r\n\r\n// \t\tactivate : function(wizard){\r\n\t\t\t\r\n// \t\t\tthis.postprocessSettings = wizard.conf.postprocessSettings;\r\n// \t\t\tthis.queryResultId = wizard.conf.queryResultId;\r\n// \t\t\tthis.serieRequest = wizard.conf.serieRequest;\r\n// \t\t\tthis.decoration = wizard.conf.decoration;\r\n\r\n// \t\t\tthis.makeRequest();\r\n// \t\t\tvar thos = this;\r\n\r\n// \t\t\tnew Requestor()\r\n// \t        .push(\"getOptions\",function(requestor){\r\n// \t          $http.get(\"./widgets/nvd3-distribution/options.json\")\r\n// \t          .success(function(data){\r\n// \t             thos.options = data;\r\n                \r\n// \t            if(thos.decoration){\r\n// \t            \tDistributionAdapter.applyDecoration(thos.options,thos.decoration)\r\n// \t            }else{\r\n// \t            \tthos.decoration = DistributionAdapter.getDecoration(thos.options);\r\n// \t            }\r\n// \t            thos.decoration.width = parentHolder(thos.wizard.conf).width;\r\n// \t            thos.setupOptions();\t\r\n// \t          //    thos.options.chart.x = function (d) { return d.label };\r\n//            //       thos.options.chart.y = function (d) { return d.value };\r\n//            //       thos.options.chart.tooltipContent: function (serie, x, y, s) {\r\n//            //    \t\t\treturn \"<center><b>\" + s.point.label + \"</b><br/>\" + s.series.key + \" : \" + s.point.value.toFixed(2) + \"</center>\"\r\n//            //  \t};\r\n// \t            requestor.resolve();\r\n// \t          })                \r\n// \t        })\r\n// \t        .push(\"generateSeries\",function(requestor){\r\n// \t          \t$http\r\n// \t            .post(\"./api/data/process/\",\r\n// \t              thos.request    \r\n// \t            )\r\n// \t            .success(function (data) {\r\n// \t            \tthos.data = data.data;\r\n// \t                thos.data_id = data.data_id;\r\n// \t                console.log(thos.data)\r\n// \t                requestor.resolve(data.data_id)\r\n// \t          \t})\r\n// \t         })\r\n// \t        .execute(this.queryResultId,function(data){\r\n// \t        \tthos.serieDataId = data;\r\n// \t        \tthos.wizard.complete(thos);\r\n// \t        \tthos.settings = {options:angular.copy(thos.options), data:angular.copy(thos.data)}\r\n\t        \t\r\n// \t         });\r\n          \r\n// \t\t},\r\n\r\n// \t\tapply: function(){\r\n\r\n// \t\t\tthis.decoration.width = parentHolder(this.wizard.conf).width;\r\n// \t\t\tDistributionAdapter.applyDecoration(this.options,this.decoration);\r\n// \t\t\tthis.settings = {options:angular.copy(this.options), data:angular.copy(this.data)};\r\n// \t\t\t// this.makeRequest();\r\n// \t\t}\t\r\n//     }\r\n// }]);    \t\r\n"],"sourceRoot":"/source/"}